rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId
        && isValidUser(resource.data);
    }
    
    // Apps collection - users can read/write their own apps
    match /apps/{appId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId
        && isValidApp(request.resource.data);
      
      // Generation sessions subcollection
      match /sessions/{sessionId} {
        allow read, write: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/apps/$(appId)).data.userId;
        allow create: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/apps/$(appId)).data.userId
          && isValidSession(request.resource.data);
      }
    }
    
    // Templates collection - readable by all authenticated users
    match /templates/{templateId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        ('admin' in request.auth.token && request.auth.token.admin == true);
    }
    
    // Generation logs - users can read their own logs
    match /generation_logs/{logId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId
        && isValidLog(request.resource.data);
    }
    
    // Usage tracking - users can read their own usage
    match /usage/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && 
        ('admin' in request.auth.token && request.auth.token.admin == true);
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if request.auth != null && 
        ('admin' in request.auth.token && request.auth.token.admin == true);
    }
    
    // Helper functions for validation
    function isValidUser(user) {
      return user.keys().hasAll(['email', 'createdAt']) &&
        user.email is string &&
        user.createdAt is timestamp &&
        (user.subscriptionTier == null || user.subscriptionTier in ['free', 'pro', 'enterprise']);
    }
    
    function isValidApp(app) {
      return app.keys().hasAll(['name', 'userId', 'status', 'createdAt']) &&
        app.name is string &&
        app.userId is string &&
        app.status in ['draft', 'generating', 'completed', 'deployed', 'failed'] &&
        app.createdAt is timestamp;
    }
    
    function isValidSession(session) {
      return session.keys().hasAll(['appId', 'userId', 'status', 'createdAt']) &&
        session.appId is string &&
        session.userId is string &&
        session.status in ['planning', 'generating', 'reviewing', 'completed', 'failed'] &&
        session.createdAt is timestamp;
    }
    
    function isValidLog(log) {
      return log.keys().hasAll(['userId', 'action', 'timestamp']) &&
        log.userId is string &&
        log.action is string &&
        log.timestamp is timestamp;
    }
  }
}
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Github,
  Upload,
  Settings,
  Lock,
  Unlock,
  FileText,
  Check,
  X,
  ExternalLink,
  RefreshCw
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { githubService, GitHubService } from './GitHubService';
import type { 
  GitHubRepository, 
  GitHubUser, 
  GitHubExportOptions, 
  ExportProgress,
  FileUploadResult
} from './types';
import type { FileNode } from '@/components/file-manager';

interface GitHubExportProps {
  className?: string;
  files: FileNode[];
  projectName?: string;
  onExportComplete?: (repository: GitHubRepository) => void;
  onExportError?: (error: string) => void;
}

const GitHubExport: React.FC<GitHubExportProps> = ({
  className,
  files,
  projectName = 'my-project',
  onExportComplete,
  onExportError
}) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState<GitHubUser | null>(null);
  const [repositories, setRepositories] = useState<GitHubRepository[]>([]);
  const [loading, setLoading] = useState(false);
  const [exportProgress, setExportProgress] = useState<ExportProgress | null>(null);
  const [exportOptions, setExportOptions] = useState<GitHubExportOptions>({
    repositoryName: projectName,
    description: `Generated project: ${projectName}`,
    isPrivate: false,
    includeReadme: true,
    createNewRepo: true,
    commitMessage: 'Initial commit - Generated by Stich Production',
    branchName: 'main'
  });

  useEffect(() => {
    checkAuthentication();
  }, []);

  const checkAuthentication = async () => {
    if (githubService.isAuthenticated()) {
      try {
        setLoading(true);
        const userData = await githubService.getCurrentUser();
        const userRepos = await githubService.getUserRepositories();
        setUser(userData);
        setRepositories(userRepos);
        setIsAuthenticated(true);
      } catch (error) {
        console.error('Authentication check failed:', error);
        githubService.clearToken();
        setIsAuthenticated(false);
      } finally {
        setLoading(false);
      }
    }
  };

  const handleLogin = () => {
    // In a real app, you'd have these from environment variables
    const clientId = process.env.VITE_GITHUB_CLIENT_ID || 'your_github_client_id';
    const authUrl = GitHubService.getAuthUrl(clientId, ['repo', 'user']);
    
    // Open GitHub OAuth in a popup
    const popup = window.open(
      authUrl,
      'github-auth',
      'width=600,height=700,scrollbars=yes,resizable=yes'
    );

    // Listen for the OAuth callback
    const checkClosed = setInterval(() => {
      if (popup?.closed) {
        clearInterval(checkClosed);
        // Check if authentication was successful
        setTimeout(checkAuthentication, 1000);
      }
    }, 1000);
  };

  const handleLogout = () => {
    githubService.clearToken();
    setIsAuthenticated(false);
    setUser(null);
    setRepositories([]);
  };

  const validateExportOptions = (): string | null => {
    if (!exportOptions.repositoryName.trim()) {
      return 'Repository name is required';
    }
    if (!/^[a-zA-Z0-9._-]+$/.test(exportOptions.repositoryName)) {
      return 'Repository name can only contain letters, numbers, dots, hyphens, and underscores';
    }
    if (files.length === 0) {
      return 'No files to export';
    }
    return null;
  };

  const createReadmeContent = (): string => {
    return `# ${exportOptions.repositoryName}

${exportOptions.description || 'A project generated by Stich Production'}

## About

This project was automatically generated using Stich Production, an AI-powered web application generator.

## Files

${files.map(file => `- \`${file.path}\``).join('\n')}

## Getting Started

1. Clone this repository
2. Install dependencies (if any)
3. Follow the setup instructions for your specific project type

---

*Generated on ${new Date().toLocaleDateString()} with [Stich Production](https://stich.production)*
`;
  };

  const createGitignoreContent = (template: string): string => {
    const templates: Record<string, string> = {
      node: `# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Production builds
/dist
/build

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db`,
      
      python: `# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/

# Virtual environments
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db`,

      react: `# Dependencies
node_modules/
/.pnp
.pnp.js

# Production builds
/build
/dist

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db`
    };

    return templates[template] || templates.node;
  };

  const handleExport = async () => {
    const validationError = validateExportOptions();
    if (validationError) {
      onExportError?.(validationError);
      return;
    }

    setLoading(true);
    
    try {
      // Step 1: Create or get repository
      setExportProgress({
        step: 'creating_repo',
        message: 'Creating GitHub repository...',
        progress: 10
      });

      let repository: GitHubRepository;
      
      if (exportOptions.createNewRepo) {
        repository = await githubService.createRepository({
          name: exportOptions.repositoryName,
          ...(exportOptions.description && { description: exportOptions.description }),
          private: exportOptions.isPrivate,
          auto_init: false
        });
      } else {
        const existingRepo = repositories.find(r => r.id === exportOptions.existingRepoId);
        if (!existingRepo) {
          throw new Error('Selected repository not found');
        }
        repository = existingRepo;
      }

      setExportProgress({
        step: 'uploading_files',
        message: 'Uploading files...',
        progress: 30
      });

      // Step 2: Upload files
      const filesToUpload = [...files];
      
      // Add README if requested
      if (exportOptions.includeReadme) {
        filesToUpload.push({
          id: 'readme',
          name: 'README.md',
          path: 'README.md',
          type: 'file',
          content: createReadmeContent(),
          parentId: null,
          createdAt: new Date(),
          modifiedAt: new Date(),
          version: 1
        });
      }

      // Add .gitignore if specified
      if (exportOptions.gitignore) {
        filesToUpload.push({
          id: 'gitignore',
          name: '.gitignore',
          path: '.gitignore',
          type: 'file',
          content: createGitignoreContent(exportOptions.gitignore),
          parentId: null,
          createdAt: new Date(),
          modifiedAt: new Date(),
          version: 1
        });
      }

      const uploadResults: FileUploadResult[] = [];
      let filesProcessed = 0;

      for (const file of filesToUpload) {
        if (file.type === 'file' && file.content) {
          const result = await githubService.uploadFile(
            repository.owner.login,
            repository.name,
            file.path,
            file.content,
            exportOptions.commitMessage || 'Add files',
            exportOptions.branchName
          );
          
          uploadResults.push(result);
          filesProcessed++;

          setExportProgress({
            step: 'uploading_files',
            message: `Uploading ${file.name}...`,
            progress: 30 + (filesProcessed / filesToUpload.length) * 60,
            filesProcessed,
            totalFiles: filesToUpload.length
          });
        }
      }

      // Step 3: Complete
      setExportProgress({
        step: 'completed',
        message: 'Export completed successfully!',
        progress: 100,
        filesProcessed: uploadResults.length,
        totalFiles: uploadResults.length
      });

      // Refresh repositories list
      const updatedRepos = await githubService.getUserRepositories();
      setRepositories(updatedRepos);

      onExportComplete?.(repository);

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Export failed';
      setExportProgress({
        step: 'error',
        message: 'Export failed',
        progress: 0,
        error: errorMessage
      });
      onExportError?.(errorMessage);
    } finally {
      setLoading(false);
      setTimeout(() => setExportProgress(null), 5000); // Clear progress after 5 seconds
    }
  };

  if (!isAuthenticated) {
    return (
      <Card className={cn("h-full flex flex-col", className)}>
        <CardHeader className="text-center">
          <CardTitle className="flex items-center justify-center gap-2">
            <Github className="h-6 w-6" />
            GitHub Export
          </CardTitle>
        </CardHeader>
        <CardContent className="flex-1 flex flex-col justify-center items-center space-y-4">
          <Github className="h-16 w-16 text-muted-foreground" />
          <div className="text-center space-y-2">
            <h3 className="text-lg font-medium">Connect to GitHub</h3>
            <p className="text-muted-foreground">
              Authenticate with GitHub to export your generated code as repositories
            </p>
          </div>
          <Button onClick={handleLogin} size="lg" disabled={loading}>
            {loading ? (
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <Github className="h-4 w-4 mr-2" />
            )}
            Connect GitHub Account
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={cn("h-full flex flex-col", className)}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Github className="h-5 w-5" />
            GitHub Export
            <Badge variant="outline">Connected</Badge>
          </CardTitle>
          <div className="flex items-center gap-2">
            {user && (
              <div className="flex items-center gap-2 text-sm">
                <img 
                  src={user.avatar_url} 
                  alt={user.login}
                  className="w-6 h-6 rounded-full"
                />
                <span>{user.login}</span>
              </div>
            )}
            <Button variant="outline" size="sm" onClick={handleLogout}>
              Disconnect
            </Button>
          </div>
        </div>
      </CardHeader>

      <CardContent className="flex-1 p-0">
        <Tabs defaultValue="export" className="h-full flex flex-col">
          <TabsList className="mx-4 mb-2">
            <TabsTrigger value="export" className="flex items-center gap-1">
              <Upload className="h-4 w-4" />
              Export
            </TabsTrigger>
            <TabsTrigger value="repositories" className="flex items-center gap-1">
              <Github className="h-4 w-4" />
              Repositories
            </TabsTrigger>
            <TabsTrigger value="settings" className="flex items-center gap-1">
              <Settings className="h-4 w-4" />
              Settings
            </TabsTrigger>
          </TabsList>

          <TabsContent value="export" className="flex-1 mx-4 mb-4">
            <div className="space-y-6">
              {/* Export Progress */}
              {exportProgress && (
                <Card className={cn(
                  "border-2",
                  exportProgress.step === 'error' ? 'border-red-500' :
                  exportProgress.step === 'completed' ? 'border-green-500' :
                  'border-blue-500'
                )}>
                  <CardHeader className="pb-2">
                    <div className="flex items-center gap-2">
                      {exportProgress.step === 'error' ? (
                        <X className="h-5 w-5 text-red-500" />
                      ) : exportProgress.step === 'completed' ? (
                        <Check className="h-5 w-5 text-green-500" />
                      ) : (
                        <RefreshCw className="h-5 w-5 text-blue-500 animate-spin" />
                      )}
                      <span className="font-medium">{exportProgress.message}</span>
                    </div>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <Progress value={exportProgress.progress} className="mb-2" />
                    {exportProgress.filesProcessed !== undefined && (
                      <p className="text-sm text-muted-foreground">
                        {exportProgress.filesProcessed} of {exportProgress.totalFiles} files processed
                      </p>
                    )}
                    {exportProgress.error && (
                      <p className="text-sm text-red-600 mt-2">{exportProgress.error}</p>
                    )}
                  </CardContent>
                </Card>
              )}

              {/* Export Form */}
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="repo-name">Repository Name</Label>
                    <Input
                      id="repo-name"
                      value={exportOptions.repositoryName}
                      onChange={(e) => setExportOptions(prev => ({
                        ...prev,
                        repositoryName: e.target.value
                      }))}
                      placeholder="my-awesome-project"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="branch">Branch Name</Label>
                    <Input
                      id="branch"
                      value={exportOptions.branchName}
                      onChange={(e) => setExportOptions(prev => ({
                        ...prev,
                        branchName: e.target.value
                      }))}
                      placeholder="main"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={exportOptions.description}
                    onChange={(e) => setExportOptions(prev => ({
                      ...prev,
                      description: e.target.value
                    }))}
                    placeholder="A brief description of your project"
                    rows={3}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="commit-message">Commit Message</Label>
                  <Input
                    id="commit-message"
                    value={exportOptions.commitMessage}
                    onChange={(e) => setExportOptions(prev => ({
                      ...prev,
                      commitMessage: e.target.value
                    }))}
                    placeholder="Initial commit"
                  />
                </div>

                <div className="flex items-center gap-4">
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={exportOptions.isPrivate}
                      onChange={(e) => setExportOptions(prev => ({
                        ...prev,
                        isPrivate: e.target.checked
                      }))}
                      className="rounded"
                    />
                    {exportOptions.isPrivate ? (
                      <Lock className="h-4 w-4" />
                    ) : (
                      <Unlock className="h-4 w-4" />
                    )}
                    <span className="text-sm">Private Repository</span>
                  </label>

                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={exportOptions.includeReadme}
                      onChange={(e) => setExportOptions(prev => ({
                        ...prev,
                        includeReadme: e.target.checked
                      }))}
                      className="rounded"
                    />
                    <FileText className="h-4 w-4" />
                    <span className="text-sm">Include README.md</span>
                  </label>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="gitignore">Gitignore Template</Label>
                  <select
                    id="gitignore"
                    value={exportOptions.gitignore || ''}
                    onChange={(e) => setExportOptions(prev => ({
                      ...prev,
                      ...(e.target.value ? { gitignore: e.target.value } : {})
                    }))}
                    className="w-full p-2 border rounded-md bg-background"
                  >
                    <option value="">No .gitignore</option>
                    <option value="node">Node.js</option>
                    <option value="python">Python</option>
                    <option value="react">React</option>
                  </select>
                </div>

                <div className="bg-muted p-4 rounded-lg">
                  <h4 className="font-medium mb-2">Export Summary</h4>
                  <div className="space-y-1 text-sm text-muted-foreground">
                    <p>Files to export: {files.filter(f => f.type === 'file').length}</p>
                    <p>Repository: {exportOptions.repositoryName}</p>
                    <p>Visibility: {exportOptions.isPrivate ? 'Private' : 'Public'}</p>
                    <p>Branch: {exportOptions.branchName}</p>
                  </div>
                </div>

                <Button 
                  onClick={handleExport} 
                  disabled={loading || !files.length}
                  className="w-full"
                  size="lg"
                >
                  {loading ? (
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  ) : (
                    <Upload className="h-4 w-4 mr-2" />
                  )}
                  Export to GitHub
                </Button>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="repositories" className="flex-1 mx-4 mb-4">
            <ScrollArea className="h-[600px]">
              <div className="space-y-3">
                {repositories.map((repo) => (
                  <Card key={repo.id} className="border">
                    <CardHeader className="pb-2">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <Github className="h-4 w-4" />
                          <span className="font-medium">{repo.name}</span>
                          {repo.private && <Lock className="h-3 w-3" />}
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="text-xs">
                            {repo.language || 'Unknown'}
                          </Badge>
                          <Button variant="ghost" size="sm" asChild>
                            <a 
                              href={repo.html_url} 
                              target="_blank" 
                              rel="noopener noreferrer"
                            >
                              <ExternalLink className="h-3 w-3" />
                            </a>
                          </Button>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="pt-0">
                      {repo.description && (
                        <p className="text-sm text-muted-foreground mb-2">
                          {repo.description}
                        </p>
                      )}
                      <div className="flex items-center gap-4 text-xs text-muted-foreground">
                        <span>Updated: {new Date(repo.updated_at).toLocaleDateString()}</span>
                        <span>Size: {(repo.size / 1024).toFixed(1)} MB</span>
                        <span>Branch: {repo.default_branch}</span>
                      </div>
                    </CardContent>
                  </Card>
                ))}
                {repositories.length === 0 && (
                  <div className="text-center py-8 text-muted-foreground">
                    <Github className="h-12 w-12 mx-auto mb-4 opacity-50" />
                    <p>No repositories found</p>
                  </div>
                )}
              </div>
            </ScrollArea>
          </TabsContent>

          <TabsContent value="settings" className="flex-1 mx-4 mb-4">
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Account Information</CardTitle>
                </CardHeader>
                <CardContent>
                  {user && (
                    <div className="space-y-4">
                      <div className="flex items-center gap-4">
                        <img 
                          src={user.avatar_url} 
                          alt={user.login}
                          className="w-16 h-16 rounded-full"
                        />
                        <div>
                          <h3 className="font-medium">{user.name || user.login}</h3>
                          <p className="text-sm text-muted-foreground">@{user.login}</p>
                          {user.email && (
                            <p className="text-sm text-muted-foreground">{user.email}</p>
                          )}
                        </div>
                      </div>
                      <div className="grid grid-cols-3 gap-4 pt-4 border-t">
                        <div className="text-center">
                          <div className="text-2xl font-bold">{user.public_repos}</div>
                          <div className="text-sm text-muted-foreground">Repositories</div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold">{user.followers}</div>
                          <div className="text-sm text-muted-foreground">Followers</div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold">{user.following}</div>
                          <div className="text-sm text-muted-foreground">Following</div>
                        </div>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Export Preferences</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label>Default Repository Visibility</Label>
                    <select
                      value={exportOptions.isPrivate ? 'private' : 'public'}
                      onChange={(e) => setExportOptions(prev => ({
                        ...prev,
                        isPrivate: e.target.value === 'private'
                      }))}
                      className="w-full p-2 border rounded-md bg-background"
                    >
                      <option value="public">Public</option>
                      <option value="private">Private</option>
                    </select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label>Default Branch Name</Label>
                    <Input
                      value={exportOptions.branchName}
                      onChange={(e) => setExportOptions(prev => ({
                        ...prev,
                        branchName: e.target.value
                      }))}
                      placeholder="main"
                    />
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
};

export default GitHubExport;
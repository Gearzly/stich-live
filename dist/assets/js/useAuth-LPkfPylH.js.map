{"version":3,"file":"useAuth-LPkfPylH.js","sources":["../../../src/hooks/useAuth.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { \r\n  User as FirebaseUser,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  signOut as firebaseSignOut,\r\n  onAuthStateChanged,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  GithubAuthProvider,\r\n  updateProfile,\r\n  sendPasswordResetEmail,\r\n  updatePassword,\r\n  EmailAuthProvider,\r\n  reauthenticateWithCredential\r\n} from 'firebase/auth';\r\nimport { auth } from '../lib/firebase';\r\nimport { UserService, type UserProfile } from '../services/user/UserService';\r\n\r\nexport interface AuthUser extends FirebaseUser {\r\n  profile?: UserProfile;\r\n}\r\n\r\nexport interface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterData {\r\n  email: string;\r\n  password: string;\r\n  displayName: string;\r\n}\r\n\r\nexport interface AuthState {\r\n  user: AuthUser | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport function useAuth() {\r\n  const [authState, setAuthState] = useState<AuthState>({\r\n    user: null,\r\n    loading: true,\r\n    error: null,\r\n  });\r\n\r\n  const userService = new UserService();\r\n\r\n  // Set up auth state listener\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\r\n      if (firebaseUser) {\r\n        try {\r\n          // Fetch user profile\r\n          const profile = await userService.getUserProfile(firebaseUser.uid);\r\n          \r\n          // Create AuthUser with conditional profile assignment\r\n          const authUser: AuthUser = {\r\n            ...firebaseUser,\r\n            ...(profile && { profile })\r\n          };\r\n          \r\n          setAuthState({\r\n            user: authUser,\r\n            loading: false,\r\n            error: null,\r\n          });\r\n        } catch (error) {\r\n          console.error('Error fetching user profile:', error);\r\n          setAuthState({\r\n            user: { ...firebaseUser },\r\n            loading: false,\r\n            error: 'Failed to load user profile',\r\n          });\r\n        }\r\n      } else {\r\n        setAuthState({\r\n          user: null,\r\n          loading: false,\r\n          error: null,\r\n        });\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Login with email and password\r\n  const signInWithEmail = async (credentials: LoginCredentials) => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true, error: null }));\r\n      \r\n      const result = await signInWithEmailAndPassword(\r\n        auth,\r\n        credentials.email,\r\n        credentials.password\r\n      );\r\n      \r\n      // Fetch user profile\r\n      const profile = await userService.getUserProfile(result.user.uid);\r\n      \r\n      // Create AuthUser with conditional profile assignment\r\n      const authUser: AuthUser = {\r\n        ...result.user,\r\n        ...(profile && { profile })\r\n      };\r\n      \r\n      setAuthState({\r\n        user: authUser,\r\n        loading: false,\r\n        error: null,\r\n      });\r\n      \r\n      return authUser;\r\n    } catch (error: any) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message || 'Login failed',\r\n      }));\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Register with email and password\r\n  const register = async (data: RegisterData) => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true, error: null }));\r\n      \r\n      const result = await createUserWithEmailAndPassword(\r\n        auth,\r\n        data.email,\r\n        data.password\r\n      );\r\n      \r\n      // Update Firebase user profile\r\n      await updateProfile(result.user, {\r\n        displayName: data.displayName,\r\n      });\r\n      \r\n      // Create user profile in Firestore\r\n      const profile = await userService.createUserProfile(result.user);\r\n      \r\n      // Create AuthUser with conditional profile assignment\r\n      const authUser: AuthUser = {\r\n        ...result.user,\r\n        ...(profile && { profile })\r\n      };\r\n      \r\n      setAuthState({\r\n        user: authUser,\r\n        loading: false,\r\n        error: null,\r\n      });\r\n      \r\n      return authUser;\r\n    } catch (error: any) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message || 'Registration failed',\r\n      }));\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Sign in with Google\r\n  const signInWithGoogle = async () => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true, error: null }));\r\n      \r\n      const provider = new GoogleAuthProvider();\r\n      const result = await signInWithPopup(auth, provider);\r\n      \r\n      // Check if user profile exists, create if not\r\n      let profile = await userService.getUserProfile(result.user.uid);\r\n      if (!profile) {\r\n        profile = await userService.createUserProfile(result.user);\r\n      }\r\n      \r\n      // Create AuthUser with conditional profile assignment\r\n      const authUser: AuthUser = {\r\n        ...result.user,\r\n        ...(profile && { profile })\r\n      };\r\n      \r\n      setAuthState({\r\n        user: authUser,\r\n        loading: false,\r\n        error: null,\r\n      });\r\n      \r\n      return authUser;\r\n    } catch (error: any) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message || 'Google sign-in failed',\r\n      }));\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Sign in with GitHub\r\n  const signInWithGitHub = async () => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true, error: null }));\r\n      \r\n      const provider = new GithubAuthProvider();\r\n      const result = await signInWithPopup(auth, provider);\r\n      \r\n      // Check if user profile exists, create if not\r\n      let profile = await userService.getUserProfile(result.user.uid);\r\n      if (!profile) {\r\n        profile = await userService.createUserProfile(result.user);\r\n      }\r\n      \r\n      // Create AuthUser with conditional profile assignment\r\n      const authUser: AuthUser = {\r\n        ...result.user,\r\n        ...(profile && { profile })\r\n      };\r\n      \r\n      setAuthState({\r\n        user: authUser,\r\n        loading: false,\r\n        error: null,\r\n      });\r\n      \r\n      return authUser;\r\n    } catch (error: any) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message || 'GitHub sign-in failed',\r\n      }));\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Sign out\r\n  const signOut = async () => {\r\n    try {\r\n      await firebaseSignOut(auth);\r\n      setAuthState({\r\n        user: null,\r\n        loading: false,\r\n        error: null,\r\n      });\r\n    } catch (error: any) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        error: error.message || 'Sign out failed',\r\n      }));\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Reset password\r\n  const resetPassword = async (email: string) => {\r\n    try {\r\n      await sendPasswordResetEmail(auth, email);\r\n    } catch (error: any) {\r\n      throw new Error(error.message || 'Password reset failed');\r\n    }\r\n  };\r\n\r\n  // Update password\r\n  const changePassword = async (currentPassword: string, newPassword: string) => {\r\n    try {\r\n      if (!authState.user) {\r\n        throw new Error('No authenticated user');\r\n      }\r\n\r\n      // Re-authenticate user\r\n      const credential = EmailAuthProvider.credential(\r\n        authState.user.email!,\r\n        currentPassword\r\n      );\r\n      await reauthenticateWithCredential(authState.user, credential);\r\n\r\n      // Update password\r\n      await updatePassword(authState.user, newPassword);\r\n    } catch (error: any) {\r\n      throw new Error(error.message || 'Password update failed');\r\n    }\r\n  };\r\n\r\n  // Refresh user profile\r\n  const refreshProfile = async () => {\r\n    try {\r\n      if (!authState.user) return;\r\n\r\n      const profile = await userService.getUserProfile(authState.user.uid);\r\n      \r\n      // Update auth state with new profile\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        user: prev.user ? {\r\n          ...prev.user,\r\n          ...(profile && { profile })\r\n        } : null,\r\n      }));\r\n      \r\n      return profile;\r\n    } catch (error: any) {\r\n      console.error('Error refreshing profile:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Check if user is authenticated\r\n  const isAuthenticated = !!authState.user;\r\n\r\n  // Check if user has completed profile\r\n  const hasProfile = !!authState.user?.profile;\r\n\r\n  return {\r\n    // State\r\n    user: authState.user,\r\n    loading: authState.loading,\r\n    error: authState.error,\r\n    isAuthenticated,\r\n    hasProfile,\r\n\r\n    // Actions\r\n    signInWithEmail,\r\n    register,\r\n    signInWithGoogle,\r\n    signInWithGitHub,\r\n    signOut,\r\n    resetPassword,\r\n    changePassword,\r\n    refreshProfile,\r\n\r\n    // Utilities\r\n    clearError: () => setAuthState(prev => ({ ...prev, error: null })),\r\n  };\r\n}\r\n"],"names":["useAuth","authState","setAuthState","useState","user","loading","error","userService","UserService","useEffect","unsubscribe","onAuthStateChanged","auth","async","firebaseUser","profile","getUserProfile","uid","authUser","isAuthenticated","hasProfile","signInWithEmail","credentials","prev","result","signInWithEmailAndPassword","email","password","message","register","data","createUserWithEmailAndPassword","updateProfile","displayName","createUserProfile","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","signInWithGitHub","GithubAuthProvider","signOut","firebaseSignOut","resetPassword","sendPasswordResetEmail","Error","changePassword","currentPassword","newPassword","credential","EmailAuthProvider","reauthenticateWithCredential","updatePassword","refreshProfile","clearError"],"mappings":"sMAwCO,SAASA,IACd,MAAOC,EAAWC,GAAgBC,WAAoB,CACpDC,KAAM,KACNC,SAAS,EACTC,MAAO,OAGHC,EAAc,IAAIC,EAGxBC,EAAAA,UAAU,KACR,MAAMC,EAAcC,EAAmBC,EAAMC,MAAOC,IAClD,GAAIA,EACF,IAEE,MAAMC,QAAgBR,EAAYS,eAAeF,EAAaG,KAGxDC,EAAqB,IACtBJ,KACCC,GAAW,CAAEA,YAGnBb,EAAa,CACXE,KAAMc,EACNb,SAAS,EACTC,MAAO,MAEX,OAASA,GAEPJ,EAAa,CACXE,KAAM,IAAKU,GACXT,SAAS,EACTC,MAAO,+BAEX,MAEAJ,EAAa,CACXE,KAAM,KACNC,SAAS,EACTC,MAAO,SAKb,MAAO,IAAMI,KACZ,IAGH,MAgOMS,IAAoBlB,EAAUG,KAG9BgB,IAAenB,EAAUG,MAAMW,QAErC,MAAO,CAELX,KAAMH,EAAUG,KAChBC,QAASJ,EAAUI,QACnBC,MAAOL,EAAUK,MACjBa,kBACAC,aAGAC,gBA9OsBR,MAAOS,IAC7B,IACEpB,EAAaqB,QAAcA,EAAMlB,SAAS,EAAMC,MAAO,QAEvD,MAAMkB,QAAeC,EACnBb,EACAU,EAAYI,MACZJ,EAAYK,UAIRZ,QAAgBR,EAAYS,eAAeQ,EAAOpB,KAAKa,KAGvDC,EAAqB,IACtBM,EAAOpB,QACNW,GAAW,CAAEA,YASnB,OANAb,EAAa,CACXE,KAAMc,EACNb,SAAS,EACTC,MAAO,OAGFY,CACT,OAASZ,GAMP,MALAJ,EAAaqB,IAAA,IACRA,EACHlB,SAAS,EACTC,MAAOA,EAAMsB,SAAW,kBAEpBtB,CACR,GA8MAuB,SA1MehB,MAAOiB,IACtB,IACE5B,EAAaqB,QAAcA,EAAMlB,SAAS,EAAMC,MAAO,QAEvD,MAAMkB,QAAeO,EACnBnB,EACAkB,EAAKJ,MACLI,EAAKH,gBAIDK,EAAcR,EAAOpB,KAAM,CAC/B6B,YAAaH,EAAKG,cAIpB,MAAMlB,QAAgBR,EAAY2B,kBAAkBV,EAAOpB,MAGrDc,EAAqB,IACtBM,EAAOpB,QACNW,GAAW,CAAEA,YASnB,OANAb,EAAa,CACXE,KAAMc,EACNb,SAAS,EACTC,MAAO,OAGFY,CACT,OAASZ,GAMP,MALAJ,EAAaqB,IAAA,IACRA,EACHlB,SAAS,EACTC,MAAOA,EAAMsB,SAAW,yBAEpBtB,CACR,GAqKA6B,iBAjKuBtB,UACvB,IACEX,EAAaqB,QAAcA,EAAMlB,SAAS,EAAMC,MAAO,QAEvD,MAAM8B,EAAW,IAAIC,EACfb,QAAec,EAAgB1B,EAAMwB,GAG3C,IAAIrB,QAAgBR,EAAYS,eAAeQ,EAAOpB,KAAKa,KACtDF,IACHA,QAAgBR,EAAY2B,kBAAkBV,EAAOpB,OAIvD,MAAMc,EAAqB,IACtBM,EAAOpB,QACNW,GAAW,CAAEA,YASnB,OANAb,EAAa,CACXE,KAAMc,EACNb,SAAS,EACTC,MAAO,OAGFY,CACT,OAASZ,GAMP,MALAJ,EAAaqB,IAAA,IACRA,EACHlB,SAAS,EACTC,MAAOA,EAAMsB,SAAW,2BAEpBtB,CACR,GAiIAiC,iBA7HuB1B,UACvB,IACEX,EAAaqB,QAAcA,EAAMlB,SAAS,EAAMC,MAAO,QAEvD,MAAM8B,EAAW,IAAII,EACfhB,QAAec,EAAgB1B,EAAMwB,GAG3C,IAAIrB,QAAgBR,EAAYS,eAAeQ,EAAOpB,KAAKa,KACtDF,IACHA,QAAgBR,EAAY2B,kBAAkBV,EAAOpB,OAIvD,MAAMc,EAAqB,IACtBM,EAAOpB,QACNW,GAAW,CAAEA,YASnB,OANAb,EAAa,CACXE,KAAMc,EACNb,SAAS,EACTC,MAAO,OAGFY,CACT,OAASZ,GAMP,MALAJ,EAAaqB,IAAA,IACRA,EACHlB,SAAS,EACTC,MAAOA,EAAMsB,SAAW,2BAEpBtB,CACR,GA4FAmC,QAxFc5B,UACd,UACQ6B,EAAgB9B,GACtBV,EAAa,CACXE,KAAM,KACNC,SAAS,EACTC,MAAO,MAEX,OAASA,GAKP,MAJAJ,EAAaqB,IAAA,IACRA,EACHjB,MAAOA,EAAMsB,SAAW,qBAEpBtB,CACR,GA4EAqC,cAxEoB9B,MAAOa,IAC3B,UACQkB,EAAuBhC,EAAMc,EACrC,OAASpB,GACP,MAAM,IAAIuC,MAAMvC,EAAMsB,SAAW,wBACnC,GAoEAkB,eAhEqBjC,MAAOkC,EAAyBC,KACrD,IACE,IAAK/C,EAAUG,KACb,MAAM,IAAIyC,MAAM,yBAIlB,MAAMI,EAAaC,EAAkBD,WACnChD,EAAUG,KAAKsB,MACfqB,SAEII,EAA6BlD,EAAUG,KAAM6C,SAG7CG,EAAenD,EAAUG,KAAM4C,EACvC,OAAS1C,GACP,MAAM,IAAIuC,MAAMvC,EAAMsB,SAAW,yBACnC,GAgDAyB,eA5CqBxC,UACrB,IACE,IAAKZ,EAAUG,KAAM,OAErB,MAAMW,QAAgBR,EAAYS,eAAef,EAAUG,KAAKa,KAWhE,OARAf,EAAaqB,IAAA,IACRA,EACHnB,KAAMmB,EAAKnB,KAAO,IACbmB,EAAKnB,QACJW,GAAW,CAAEA,YACf,QAGCA,CACT,OAAST,GAEP,MAAMA,CACR,GA4BAgD,WAAY,IAAMpD,EAAaqB,IAAA,IAAcA,EAAMjB,MAAO,QAE9D"}
{"version":3,"file":"SearchPage-YxdNonmn.js","sources":["../../../src/components/ui/checkbox.tsx","../../../src/components/search/GlobalSearch.tsx","../../../src/components/ui/feedback.tsx","../../../src/components/ui/loading.tsx","../../../src/routes/SearchPage.tsx"],"sourcesContent":["/**\r\n * Checkbox Component\r\n * A customizable checkbox input with proper accessibility\r\n */\r\n\r\n// import React from 'react';\r\nimport { Check } from 'lucide-react';\r\nimport { cn } from '../../lib/utils';\r\n\r\ninterface CheckboxProps {\r\n  id?: string;\r\n  checked: boolean;\r\n  onCheckedChange: (checked: boolean) => void;\r\n  disabled?: boolean;\r\n  className?: string;\r\n  'aria-label'?: string;\r\n}\r\n\r\nexport function Checkbox({\r\n  id,\r\n  checked,\r\n  onCheckedChange,\r\n  disabled = false,\r\n  className,\r\n  'aria-label': ariaLabel,\r\n}: CheckboxProps) {\r\n  return (\r\n    <button\r\n      id={id}\r\n      type=\"button\"\r\n      role=\"checkbox\"\r\n      aria-checked={checked}\r\n      aria-label={ariaLabel}\r\n      disabled={disabled}\r\n      className={cn(\r\n        'flex h-4 w-4 items-center justify-center rounded-sm border border-gray-300 bg-white',\r\n        'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',\r\n        'disabled:cursor-not-allowed disabled:opacity-50',\r\n        checked && 'bg-blue-600 border-blue-600 text-white',\r\n        'hover:border-gray-400 transition-colors',\r\n        className\r\n      )}\r\n      onClick={() => !disabled && onCheckedChange(!checked)}\r\n    >\r\n      {checked && <Check className=\"h-3 w-3\" />}\r\n    </button>\r\n  );\r\n}","/**\r\n * Global Search Component\r\n * Provides global search functionality with suggestions and quick results\r\n */\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { Search, X, Clock, TrendingUp, /* Filter, */ ArrowRight } from 'lucide-react';\r\nimport { Input } from '../ui/input';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport { Card, CardContent } from '../ui/card';\r\nimport { useSearch, SearchResult } from '../../contexts/SearchContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { cn } from '../../lib/utils';\r\n\r\ninterface GlobalSearchProps {\r\n  className?: string;\r\n  placeholder?: string;\r\n  showFullInterface?: boolean;\r\n}\r\n\r\nexport function GlobalSearch({ \r\n  className, \r\n  placeholder = \"Search apps, templates, users...\",\r\n  showFullInterface = false \r\n}: GlobalSearchProps) {\r\n  const navigate = useNavigate();\r\n  const {\r\n    query,\r\n    search,\r\n    clearSearch,\r\n    getSuggestions,\r\n    quickSearch,\r\n    recentSearches,\r\n    popularSearches,\r\n    loading,\r\n  } = useSearch();\r\n\r\n  const [localQuery, setLocalQuery] = useState(query);\r\n  const [suggestions, setSuggestions] = useState<string[]>([]);\r\n  const [quickResults, setQuickResults] = useState<SearchResult[]>([]);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [activeIndex, setActiveIndex] = useState(-1);\r\n  \r\n  const searchRef = useRef<HTMLDivElement>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const debounceRef = useRef<NodeJS.Timeout>();\r\n\r\n  // Handle outside clicks\r\n  useEffect(() => {\r\n    function handleClickOutside(event: MouseEvent) {\r\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false);\r\n        setActiveIndex(-1);\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  // Debounced search suggestions\r\n  useEffect(() => {\r\n    if (debounceRef.current) {\r\n      clearTimeout(debounceRef.current);\r\n    }\r\n\r\n    if (localQuery.trim().length > 0) {\r\n      debounceRef.current = setTimeout(async () => {\r\n        try {\r\n          const [suggestionsData, quickData] = await Promise.all([\r\n            getSuggestions(localQuery),\r\n            quickSearch(localQuery),\r\n          ]);\r\n          setSuggestions(suggestionsData);\r\n          setQuickResults(quickData);\r\n        } catch (error) {\r\n          console.error('Failed to get suggestions:', error);\r\n        }\r\n      }, 300);\r\n    } else {\r\n      setSuggestions([]);\r\n      setQuickResults([]);\r\n    }\r\n\r\n    return () => {\r\n      if (debounceRef.current) {\r\n        clearTimeout(debounceRef.current);\r\n      }\r\n    };\r\n  }, [localQuery, getSuggestions, quickSearch]);\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setLocalQuery(value);\r\n    setIsOpen(true);\r\n    setActiveIndex(-1);\r\n  };\r\n\r\n  const handleSearch = async (searchQuery: string) => {\r\n    if (!searchQuery.trim()) return;\r\n    \r\n    await search(searchQuery);\r\n    setIsOpen(false);\r\n    setActiveIndex(-1);\r\n    \r\n    // Navigate to search results page if not in full interface mode\r\n    if (!showFullInterface) {\r\n      navigate(`/search?q=${encodeURIComponent(searchQuery)}`);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    handleSearch(localQuery);\r\n  };\r\n\r\n  const handleSuggestionClick = (suggestion: string) => {\r\n    setLocalQuery(suggestion);\r\n    handleSearch(suggestion);\r\n  };\r\n\r\n  const handleQuickResultClick = (result: SearchResult) => {\r\n    setIsOpen(false);\r\n    navigate(result.url);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    const allItems = [\r\n      ...suggestions,\r\n      ...quickResults.map(r => r.title),\r\n    ];\r\n\r\n    if (e.key === 'ArrowDown') {\r\n      e.preventDefault();\r\n      setActiveIndex(prev => (prev + 1) % allItems.length);\r\n    } else if (e.key === 'ArrowUp') {\r\n      e.preventDefault();\r\n      setActiveIndex(prev => prev <= 0 ? allItems.length - 1 : prev - 1);\r\n    } else if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      if (activeIndex >= 0 && activeIndex < allItems.length) {\r\n        const selectedItem = allItems[activeIndex];\r\n        if (activeIndex < suggestions.length) {\r\n          // It's a suggestion\r\n          handleSuggestionClick(selectedItem);\r\n        } else {\r\n          // It's a quick result\r\n          const resultIndex = activeIndex - suggestions.length;\r\n          handleQuickResultClick(quickResults[resultIndex]);\r\n        }\r\n      } else {\r\n        handleSearch(localQuery);\r\n      }\r\n    } else if (e.key === 'Escape') {\r\n      setIsOpen(false);\r\n      setActiveIndex(-1);\r\n      inputRef.current?.blur();\r\n    }\r\n  };\r\n\r\n  const handleClearSearch = () => {\r\n    setLocalQuery('');\r\n    clearSearch();\r\n    setSuggestions([]);\r\n    setQuickResults([]);\r\n    setIsOpen(false);\r\n    inputRef.current?.focus();\r\n  };\r\n\r\n  const showDropdown = isOpen && (\r\n    localQuery.length > 0 || \r\n    recentSearches.length > 0 || \r\n    popularSearches.length > 0\r\n  );\r\n\r\n  return (\r\n    <div ref={searchRef} className={cn('relative', className)}>\r\n      <form onSubmit={handleSubmit} className=\"relative\">\r\n        <div className=\"relative\">\r\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n          <Input\r\n            ref={inputRef}\r\n            type=\"text\"\r\n            placeholder={placeholder}\r\n            value={localQuery}\r\n            onChange={handleInputChange}\r\n            onFocus={() => setIsOpen(true)}\r\n            onKeyDown={handleKeyDown}\r\n            className=\"pl-10 pr-10\"\r\n          />\r\n          {(localQuery || loading) && (\r\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 flex items-center gap-1\">\r\n              {loading && (\r\n                <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-primary border-t-transparent\" />\r\n              )}\r\n              {localQuery && (\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  className=\"h-6 w-6 p-0\"\r\n                  onClick={handleClearSearch}\r\n                >\r\n                  <X className=\"h-3 w-3\" />\r\n                </Button>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {showFullInterface && (\r\n          <Button type=\"submit\" className=\"ml-2\">\r\n            <Search className=\"h-4 w-4 mr-2\" />\r\n            Search\r\n          </Button>\r\n        )}\r\n      </form>\r\n\r\n      {/* Search Dropdown */}\r\n      {showDropdown && (\r\n        <Card className=\"absolute top-full left-0 right-0 mt-1 z-50 max-h-96 overflow-hidden shadow-lg\">\r\n          <CardContent className=\"p-0\">\r\n            <div className=\"max-h-96 overflow-y-auto\">\r\n              {/* Quick Results */}\r\n              {quickResults.length > 0 && (\r\n                <div className=\"border-b border-border\">\r\n                  <div className=\"px-3 py-2 text-xs font-medium text-muted-foreground uppercase tracking-wide\">\r\n                    Quick Results\r\n                  </div>\r\n                  {quickResults.map((result, index) => {\r\n                    const itemIndex = suggestions.length + index;\r\n                    return (\r\n                      <button\r\n                        key={result.id}\r\n                        className={cn(\r\n                          'w-full px-3 py-2 text-left hover:bg-muted/50 flex items-center justify-between group',\r\n                          activeIndex === itemIndex && 'bg-muted'\r\n                        )}\r\n                        onClick={() => handleQuickResultClick(result)}\r\n                      >\r\n                        <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n                          {result.thumbnail ? (\r\n                            <img \r\n                              src={result.thumbnail} \r\n                              alt={result.title}\r\n                              className=\"w-8 h-8 rounded object-cover flex-shrink-0\"\r\n                            />\r\n                          ) : (\r\n                            <div className=\"w-8 h-8 rounded bg-muted flex items-center justify-center flex-shrink-0\">\r\n                              <Search className=\"h-4 w-4 text-muted-foreground\" />\r\n                            </div>\r\n                          )}\r\n                          <div className=\"min-w-0 flex-1\">\r\n                            <div className=\"font-medium text-sm truncate\">{result.title}</div>\r\n                            <div className=\"text-xs text-muted-foreground truncate\">\r\n                              {result.description}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex items-center gap-1 flex-shrink-0\">\r\n                          <Badge variant=\"secondary\" className=\"text-xs\">\r\n                            {result.type}\r\n                          </Badge>\r\n                          <ArrowRight className=\"h-3 w-3 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity\" />\r\n                        </div>\r\n                      </button>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n\r\n              {/* Suggestions */}\r\n              {suggestions.length > 0 && (\r\n                <div className=\"border-b border-border\">\r\n                  <div className=\"px-3 py-2 text-xs font-medium text-muted-foreground uppercase tracking-wide\">\r\n                    Suggestions\r\n                  </div>\r\n                  {suggestions.map((suggestion, index) => (\r\n                    <button\r\n                      key={suggestion}\r\n                      className={cn(\r\n                        'w-full px-3 py-2 text-left hover:bg-muted/50 flex items-center gap-3',\r\n                        activeIndex === index && 'bg-muted'\r\n                      )}\r\n                      onClick={() => handleSuggestionClick(suggestion)}\r\n                    >\r\n                      <Search className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\r\n                      <span className=\"text-sm\">{suggestion}</span>\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              )}\r\n\r\n              {/* Recent Searches */}\r\n              {localQuery.length === 0 && recentSearches.length > 0 && (\r\n                <div className=\"border-b border-border\">\r\n                  <div className=\"px-3 py-2 text-xs font-medium text-muted-foreground uppercase tracking-wide\">\r\n                    Recent Searches\r\n                  </div>\r\n                  {recentSearches.slice(0, 5).map((recent) => (\r\n                    <button\r\n                      key={recent}\r\n                      className=\"w-full px-3 py-2 text-left hover:bg-muted/50 flex items-center gap-3\"\r\n                      onClick={() => handleSuggestionClick(recent)}\r\n                    >\r\n                      <Clock className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\r\n                      <span className=\"text-sm\">{recent}</span>\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              )}\r\n\r\n              {/* Popular Searches */}\r\n              {localQuery.length === 0 && popularSearches.length > 0 && (\r\n                <div>\r\n                  <div className=\"px-3 py-2 text-xs font-medium text-muted-foreground uppercase tracking-wide\">\r\n                    Popular Searches\r\n                  </div>\r\n                  {popularSearches.slice(0, 5).map((popular) => (\r\n                    <button\r\n                      key={popular}\r\n                      className=\"w-full px-3 py-2 text-left hover:bg-muted/50 flex items-center gap-3\"\r\n                      onClick={() => handleSuggestionClick(popular)}\r\n                    >\r\n                      <TrendingUp className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\r\n                      <span className=\"text-sm\">{popular}</span>\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              )}\r\n\r\n              {/* No results */}\r\n              {localQuery.length > 0 && suggestions.length === 0 && quickResults.length === 0 && !loading && (\r\n                <div className=\"px-3 py-8 text-center text-muted-foreground\">\r\n                  <Search className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n                  <p className=\"text-sm\">No suggestions found</p>\r\n                  <p className=\"text-xs\">Press Enter to search anyway</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}","/**\r\n * User Feedback Components\r\n * Components for user feedback like empty states, error states, and success messages\r\n */\r\n\r\nimport React from 'react';\r\nimport { \r\n  AlertCircle, \r\n  CheckCircle, \r\n  Info, \r\n  AlertTriangle, \r\n  Search, \r\n  Inbox, \r\n  FileX, \r\n  WifiOff,\r\n  RefreshCw,\r\n  Plus,\r\n  ArrowLeft\r\n} from 'lucide-react';\r\nimport { cn } from '../../lib/utils';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\n\r\n// Base feedback component\r\ninterface FeedbackProps {\r\n  icon: React.ComponentType<any>;\r\n  title: string;\r\n  description: string;\r\n  actions?: React.ReactNode;\r\n  className?: string | undefined;\r\n  variant?: 'default' | 'success' | 'warning' | 'error' | 'info';\r\n}\r\n\r\nfunction BaseFeedback({ \r\n  icon: Icon, \r\n  title, \r\n  description, \r\n  actions, \r\n  className, \r\n  variant = 'default' \r\n}: FeedbackProps) {\r\n  const variantStyles = {\r\n    default: 'text-gray-600',\r\n    success: 'text-green-600',\r\n    warning: 'text-yellow-600',\r\n    error: 'text-red-600',\r\n    info: 'text-blue-600',\r\n  };\r\n\r\n  return (\r\n    <div className={cn('flex flex-col items-center justify-center p-8 text-center', className)}>\r\n      <div className={cn('w-16 h-16 mb-4 flex items-center justify-center rounded-full bg-gray-100', \r\n        variant === 'success' && 'bg-green-100',\r\n        variant === 'warning' && 'bg-yellow-100',\r\n        variant === 'error' && 'bg-red-100',\r\n        variant === 'info' && 'bg-blue-100'\r\n      )}>\r\n        <Icon className={cn('w-8 h-8', variantStyles[variant])} />\r\n      </div>\r\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{title}</h3>\r\n      <p className=\"text-gray-600 mb-6 max-w-md\">{description}</p>\r\n      {actions && <div className=\"flex flex-wrap gap-2 justify-center\">{actions}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Empty state components\r\nexport function EmptyState({ \r\n  title = 'No items found', \r\n  description = 'There are no items to display at the moment.',\r\n  action,\r\n  className \r\n}: {\r\n  title?: string;\r\n  description?: string;\r\n  action?: React.ReactNode;\r\n  className?: string;\r\n}) {\r\n  return (\r\n    <BaseFeedback\r\n      icon={Inbox}\r\n      title={title}\r\n      description={description}\r\n      actions={action}\r\n      {...(className && { className })}\r\n    />\r\n  );\r\n}\r\n\r\nexport function SearchEmptyState({ \r\n  query,\r\n  onClear,\r\n  className \r\n}: {\r\n  query?: string;\r\n  onClear?: () => void;\r\n  className?: string;\r\n}) {\r\n  return (\r\n    <BaseFeedback\r\n      icon={Search}\r\n      title=\"No results found\"\r\n      description={query ? `No results found for \"${query}\". Try adjusting your search terms.` : 'Try searching for something else.'}\r\n      actions={\r\n        onClear && (\r\n          <Button variant=\"outline\" onClick={onClear}>\r\n            Clear Search\r\n          </Button>\r\n        )\r\n      }\r\n      {...(className && { className })}\r\n    />\r\n  );\r\n}\r\n\r\nexport function NoFilesState({ \r\n  onUpload,\r\n  canUpload = true,\r\n  className \r\n}: {\r\n  onUpload?: () => void;\r\n  canUpload?: boolean;\r\n  className?: string;\r\n}) {\r\n  return (\r\n    <BaseFeedback\r\n      icon={FileX}\r\n      title=\"No files yet\"\r\n      description=\"Upload your first file to get started with your project.\"\r\n      actions={\r\n        canUpload && onUpload && (\r\n          <Button onClick={onUpload}>\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            Upload File\r\n          </Button>\r\n        )\r\n      }\r\n      {...(className && { className })}\r\n    />\r\n  );\r\n}\r\n\r\n// Error state components\r\nexport function ErrorState({ \r\n  title = 'Something went wrong',\r\n  description = 'An error occurred while loading this content.',\r\n  onRetry,\r\n  onGoBack,\r\n  showDetails = false,\r\n  error,\r\n  className \r\n}: {\r\n  title?: string;\r\n  description?: string;\r\n  onRetry?: () => void;\r\n  onGoBack?: () => void;\r\n  showDetails?: boolean;\r\n  error?: Error;\r\n  className?: string;\r\n}) {\r\n  return (\r\n    <div className={cn('text-center p-8', className)}>\r\n      <BaseFeedback\r\n        icon={AlertCircle}\r\n        title={title}\r\n        description={description}\r\n        variant=\"error\"\r\n        actions={\r\n          <div className=\"space-x-2\">\r\n            {onRetry && (\r\n              <Button onClick={onRetry}>\r\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\r\n                Try Again\r\n              </Button>\r\n            )}\r\n            {onGoBack && (\r\n              <Button variant=\"outline\" onClick={onGoBack}>\r\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\r\n                Go Back\r\n              </Button>\r\n            )}\r\n          </div>\r\n        }\r\n      />\r\n      \r\n      {showDetails && error && (\r\n        <details className=\"mt-6 text-left max-w-md mx-auto\">\r\n          <summary className=\"cursor-pointer text-sm text-gray-600 hover:text-gray-800\">\r\n            Show technical details\r\n          </summary>\r\n          <div className=\"mt-2 p-3 bg-red-50 border border-red-200 rounded text-xs text-red-700 font-mono\">\r\n            {error.message}\r\n          </div>\r\n        </details>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function NetworkErrorState({ \r\n  onRetry,\r\n  className \r\n}: {\r\n  onRetry?: () => void;\r\n  className?: string;\r\n}) {\r\n  return (\r\n    <BaseFeedback\r\n      icon={WifiOff}\r\n      title=\"Connection problem\"\r\n      description=\"Please check your internet connection and try again.\"\r\n      variant=\"warning\"\r\n      actions={\r\n        onRetry && (\r\n          <Button onClick={onRetry}>\r\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\r\n            Retry\r\n          </Button>\r\n        )\r\n      }\r\n      className={className}\r\n    />\r\n  );\r\n}\r\n\r\n// Success state components\r\nexport function SuccessState({ \r\n  title = 'Success!',\r\n  description = 'Your action was completed successfully.',\r\n  action,\r\n  className \r\n}: {\r\n  title?: string;\r\n  description?: string;\r\n  action?: React.ReactNode;\r\n  className?: string;\r\n}) {\r\n  return (\r\n    <BaseFeedback\r\n      icon={CheckCircle}\r\n      title={title}\r\n      description={description}\r\n      variant=\"success\"\r\n      actions={action}\r\n      className={className}\r\n    />\r\n  );\r\n}\r\n\r\n// Info state components\r\nexport function InfoState({ \r\n  title,\r\n  description,\r\n  action,\r\n  className \r\n}: {\r\n  title: string;\r\n  description: string;\r\n  action?: React.ReactNode;\r\n  className?: string;\r\n}) {\r\n  return (\r\n    <BaseFeedback\r\n      icon={Info}\r\n      title={title}\r\n      description={description}\r\n      variant=\"info\"\r\n      actions={action}\r\n      className={className}\r\n    />\r\n  );\r\n}\r\n\r\n// Warning state components\r\nexport function WarningState({ \r\n  title,\r\n  description,\r\n  action,\r\n  className \r\n}: {\r\n  title: string;\r\n  description: string;\r\n  action?: React.ReactNode;\r\n  className?: string;\r\n}) {\r\n  return (\r\n    <BaseFeedback\r\n      icon={AlertTriangle}\r\n      title={title}\r\n      description={description}\r\n      variant=\"warning\"\r\n      actions={action}\r\n      className={className}\r\n    />\r\n  );\r\n}\r\n\r\n// Inline feedback components for smaller spaces\r\nexport function InlineError({ \r\n  message,\r\n  onDismiss,\r\n  className \r\n}: {\r\n  message: string;\r\n  onDismiss?: () => void;\r\n  className?: string;\r\n}) {\r\n  return (\r\n    <div className={cn('flex items-center space-x-2 text-sm text-red-600 bg-red-50 border border-red-200 rounded-md p-3', className)}>\r\n      <AlertCircle className=\"w-4 h-4 flex-shrink-0\" />\r\n      <span className=\"flex-1\">{message}</span>\r\n      {onDismiss && (\r\n        <Button \r\n          variant=\"ghost\" \r\n          size=\"sm\" \r\n          onClick={onDismiss}\r\n          className=\"h-auto p-1 text-red-600 hover:text-red-700\"\r\n        >\r\n          ×\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function InlineSuccess({ \r\n  message,\r\n  onDismiss,\r\n  className \r\n}: {\r\n  message: string;\r\n  onDismiss?: () => void;\r\n  className?: string;\r\n}) {\r\n  return (\r\n    <div className={cn('flex items-center space-x-2 text-sm text-green-600 bg-green-50 border border-green-200 rounded-md p-3', className)}>\r\n      <CheckCircle className=\"w-4 h-4 flex-shrink-0\" />\r\n      <span className=\"flex-1\">{message}</span>\r\n      {onDismiss && (\r\n        <Button \r\n          variant=\"ghost\" \r\n          size=\"sm\" \r\n          onClick={onDismiss}\r\n          className=\"h-auto p-1 text-green-600 hover:text-green-700\"\r\n        >\r\n          ×\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function InlineWarning({ \r\n  message,\r\n  onDismiss,\r\n  className \r\n}: {\r\n  message: string;\r\n  onDismiss?: () => void;\r\n  className?: string;\r\n}) {\r\n  return (\r\n    <div className={cn('flex items-center space-x-2 text-sm text-yellow-600 bg-yellow-50 border border-yellow-200 rounded-md p-3', className)}>\r\n      <AlertTriangle className=\"w-4 h-4 flex-shrink-0\" />\r\n      <span className=\"flex-1\">{message}</span>\r\n      {onDismiss && (\r\n        <Button \r\n          variant=\"ghost\" \r\n          size=\"sm\" \r\n          onClick={onDismiss}\r\n          className=\"h-auto p-1 text-yellow-600 hover:text-yellow-700\"\r\n        >\r\n          ×\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Card-based feedback components\r\nexport function FeedbackCard({ \r\n  title,\r\n  description,\r\n  variant = 'default',\r\n  actions,\r\n  className \r\n}: {\r\n  title: string;\r\n  description: string;\r\n  variant?: 'default' | 'success' | 'warning' | 'error' | 'info';\r\n  actions?: React.ReactNode;\r\n  className?: string;\r\n}) {\r\n  const variantStyles = {\r\n    default: 'border-gray-200',\r\n    success: 'border-green-200 bg-green-50',\r\n    warning: 'border-yellow-200 bg-yellow-50',\r\n    error: 'border-red-200 bg-red-50',\r\n    info: 'border-blue-200 bg-blue-50',\r\n  };\r\n\r\n  return (\r\n    <Card className={cn(variantStyles[variant], className)}>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-lg\">{title}</CardTitle>\r\n        <CardDescription>{description}</CardDescription>\r\n      </CardHeader>\r\n      {actions && (\r\n        <CardContent>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            {actions}\r\n          </div>\r\n        </CardContent>\r\n      )}\r\n    </Card>\r\n  );\r\n}","/**\r\n * Loading Components\r\n * Various loading indicators and skeleton screens\r\n */\r\n\r\nimport React from 'react';\r\nimport { Loader2, Sparkles, Zap } from 'lucide-react';\r\nimport { cn } from '../../lib/utils';\r\n\r\n// Basic spinner loader\r\ninterface LoaderProps {\r\n  size?: 'sm' | 'md' | 'lg' | 'xl';\r\n  className?: string;\r\n  text?: string;\r\n}\r\n\r\nexport function Loader({ size = 'md', className, text }: LoaderProps) {\r\n  const sizeClasses = {\r\n    sm: 'w-4 h-4',\r\n    md: 'w-6 h-6',\r\n    lg: 'w-8 h-8',\r\n    xl: 'w-12 h-12',\r\n  };\r\n\r\n  return (\r\n    <div className={cn('flex flex-col items-center justify-center space-y-2', className)}>\r\n      <Loader2 className={cn('animate-spin text-blue-600', sizeClasses[size])} />\r\n      {text && (\r\n        <p className=\"text-sm text-gray-600 animate-pulse\">{text}</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Full-screen loading overlay\r\ninterface LoadingOverlayProps {\r\n  isLoading: boolean;\r\n  text?: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport function LoadingOverlay({ isLoading, text = 'Loading...', children }: LoadingOverlayProps) {\r\n  return (\r\n    <div className=\"relative\">\r\n      {children}\r\n      {isLoading && (\r\n        <div className=\"absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center z-50\">\r\n          <div className=\"bg-white rounded-lg shadow-lg p-6 flex flex-col items-center space-y-4\">\r\n            <Loader size=\"lg\" />\r\n            <p className=\"text-gray-700 font-medium\">{text}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// AI Generation Loading with animated effects\r\ninterface AILoadingProps {\r\n  stage?: string;\r\n  progress?: number;\r\n  className?: string;\r\n}\r\n\r\nexport function AILoading({ stage = 'Generating...', progress, className }: AILoadingProps) {\r\n  return (\r\n    <div className={cn('flex flex-col items-center justify-center space-y-4 p-8', className)}>\r\n      {/* Animated AI icon */}\r\n      <div className=\"relative\">\r\n        <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center\">\r\n          <Sparkles className=\"w-8 h-8 text-white animate-pulse\" />\r\n        </div>\r\n        <div className=\"absolute inset-0 w-16 h-16 rounded-full border-4 border-blue-200 animate-ping\" />\r\n      </div>\r\n\r\n      {/* Stage text */}\r\n      <div className=\"text-center space-y-2\">\r\n        <h3 className=\"text-lg font-semibold text-gray-800\">{stage}</h3>\r\n        <p className=\"text-sm text-gray-600\">AI is working on your request...</p>\r\n      </div>\r\n\r\n      {/* Progress bar */}\r\n      {progress !== undefined && (\r\n        <div className=\"w-64 space-y-2\">\r\n          <div className=\"flex justify-between text-xs text-gray-500\">\r\n            <span>Progress</span>\r\n            <span>{Math.round(progress)}%</span>\r\n          </div>\r\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n            <div\r\n              className=\"bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-500\"\r\n              style={{ width: `${progress}%` }}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Animated dots */}\r\n      <div className=\"flex space-x-1\">\r\n        {[0, 1, 2].map((i) => (\r\n          <div\r\n            key={i}\r\n            className=\"w-2 h-2 bg-blue-500 rounded-full animate-bounce\"\r\n            style={{ animationDelay: `${i * 0.1}s` }}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Skeleton loading components\r\nexport function SkeletonCard() {\r\n  return (\r\n    <div className=\"bg-white rounded-lg border p-6 space-y-4 animate-pulse\">\r\n      <div className=\"h-4 bg-gray-200 rounded w-3/4\" />\r\n      <div className=\"h-3 bg-gray-200 rounded w-1/2\" />\r\n      <div className=\"space-y-2\">\r\n        <div className=\"h-3 bg-gray-200 rounded\" />\r\n        <div className=\"h-3 bg-gray-200 rounded w-5/6\" />\r\n      </div>\r\n      <div className=\"flex space-x-2\">\r\n        <div className=\"h-8 bg-gray-200 rounded w-20\" />\r\n        <div className=\"h-8 bg-gray-200 rounded w-16\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function SkeletonTable({ rows = 5 }: { rows?: number }) {\r\n  return (\r\n    <div className=\"space-y-3\">\r\n      {/* Header */}\r\n      <div className=\"flex space-x-4 pb-2 border-b\">\r\n        {[1, 2, 3, 4].map((i) => (\r\n          <div key={i} className=\"h-4 bg-gray-200 rounded flex-1 animate-pulse\" />\r\n        ))}\r\n      </div>\r\n      \r\n      {/* Rows */}\r\n      {Array.from({ length: rows }).map((_, i) => (\r\n        <div key={i} className=\"flex space-x-4 py-2\">\r\n          {[1, 2, 3, 4].map((j) => (\r\n            <div key={j} className=\"h-3 bg-gray-200 rounded flex-1 animate-pulse\" />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function SkeletonList({ items = 5 }: { items?: number }) {\r\n  return (\r\n    <div className=\"space-y-3\">\r\n      {Array.from({ length: items }).map((_, i) => (\r\n        <div key={i} className=\"flex items-center space-x-3 p-3 border rounded-lg animate-pulse\">\r\n          <div className=\"w-10 h-10 bg-gray-200 rounded-full\" />\r\n          <div className=\"flex-1 space-y-2\">\r\n            <div className=\"h-4 bg-gray-200 rounded w-3/4\" />\r\n            <div className=\"h-3 bg-gray-200 rounded w-1/2\" />\r\n          </div>\r\n          <div className=\"w-8 h-8 bg-gray-200 rounded\" />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Button loading states\r\ninterface LoadingButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  isLoading: boolean;\r\n  loadingText?: string;\r\n  children: React.ReactNode;\r\n  variant?: 'default' | 'outline' | 'ghost';\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\nexport function LoadingButton({\r\n  isLoading,\r\n  loadingText,\r\n  children,\r\n  disabled,\r\n  className,\r\n  variant = 'default',\r\n  size = 'md',\r\n  ...props\r\n}: LoadingButtonProps) {\r\n  const baseClasses = 'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background';\r\n  \r\n  const variantClasses = {\r\n    default: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n    outline: 'border border-input hover:bg-accent hover:text-accent-foreground',\r\n    ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n  };\r\n\r\n  const sizeClasses = {\r\n    sm: 'h-9 px-3 text-xs',\r\n    md: 'h-10 py-2 px-4 text-sm',\r\n    lg: 'h-11 px-8 text-base',\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={cn(\r\n        baseClasses,\r\n        variantClasses[variant],\r\n        sizeClasses[size],\r\n        className\r\n      )}\r\n      disabled={disabled || isLoading}\r\n      {...props}\r\n    >\r\n      {isLoading && (\r\n        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\r\n      )}\r\n      {isLoading ? loadingText || 'Loading...' : children}\r\n    </button>\r\n  );\r\n}\r\n\r\n// Page loading component\r\nexport function PageLoading({ message = 'Loading page...' }: { message?: string }) {\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\r\n      <div className=\"text-center space-y-4\">\r\n        <div className=\"relative\">\r\n          <div className=\"w-20 h-20 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center mx-auto\">\r\n            <Zap className=\"w-10 h-10 text-white\" />\r\n          </div>\r\n          <div className=\"absolute inset-0 w-20 h-20 rounded-full border-4 border-blue-200 animate-ping mx-auto\" />\r\n        </div>\r\n        <h2 className=\"text-xl font-semibold text-gray-800\">{message}</h2>\r\n        <div className=\"flex justify-center space-x-1\">\r\n          {[0, 1, 2].map((i) => (\r\n            <div\r\n              key={i}\r\n              className=\"w-2 h-2 bg-blue-500 rounded-full animate-bounce\"\r\n              style={{ animationDelay: `${i * 0.1}s` }}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Inline loading for content sections\r\nexport function InlineLoading({ text = 'Loading...', className }: { text?: string; className?: string }) {\r\n  return (\r\n    <div className={cn('flex items-center justify-center py-8', className)}>\r\n      <div className=\"flex items-center space-x-2 text-gray-600\">\r\n        <Loader2 className=\"w-5 h-5 animate-spin\" />\r\n        <span className=\"text-sm\">{text}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/**\r\n * Search Results Page\r\n * Displays search results with filtering and pagination\r\n */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\nimport { \r\n  Search, \r\n  // Filter, \r\n  SlidersHorizontal, \r\n  Grid3X3, \r\n  List, \r\n  Star, \r\n  Download, \r\n  Heart, \r\n  Calendar,\r\n  User,\r\n  // Tag,\r\n  // ChevronDown,\r\n  X\r\n} from 'lucide-react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\r\nimport { Button } from '../components/ui/button';\r\n// import { Input } from '../components/ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';\r\nimport { Badge } from '../components/ui/badge';\r\nimport { Checkbox } from '../components/ui/checkbox';\r\nimport { Label } from '../components/ui/label';\r\nimport { GlobalSearch } from '../components/search/GlobalSearch';\r\nimport { useSearch, SearchResult, SearchFilters } from '../contexts/SearchContext';\r\nimport { useNotifications } from '../contexts/NotificationContext';\r\nimport { EmptyState } from '../components/ui/feedback';\r\nimport { Loader } from '../components/ui/loading';\r\n\r\ntype ViewMode = 'grid' | 'list';\r\n\r\nexport default function SearchPage() {\r\n  const navigate = useNavigate();\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const { showSuccess } = useNotifications();\r\n  \r\n  const {\r\n    query,\r\n    results,\r\n    filters,\r\n    loading,\r\n    hasMore,\r\n    totalResults,\r\n    search,\r\n    updateFilters,\r\n    loadMore,\r\n  } = useSearch();\r\n\r\n  const [viewMode, setViewMode] = useState<ViewMode>('grid');\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [tempFilters, setTempFilters] = useState<SearchFilters>(filters);\r\n\r\n  // Initialize search from URL params\r\n  useEffect(() => {\r\n    const queryParam = searchParams.get('q');\r\n    if (queryParam && queryParam !== query) {\r\n      search(queryParam);\r\n    }\r\n  }, [searchParams, search, query]);\r\n\r\n  // Update URL when query changes\r\n  useEffect(() => {\r\n    if (query) {\r\n      setSearchParams({ q: query });\r\n    }\r\n  }, [query, setSearchParams]);\r\n\r\n  const handleApplyFilters = () => {\r\n    updateFilters(tempFilters);\r\n    setShowFilters(false);\r\n  };\r\n\r\n  const handleClearFilters = () => {\r\n    const clearedFilters: SearchFilters = {\r\n      sortBy: 'relevance',\r\n      sortOrder: 'desc',\r\n    };\r\n    setTempFilters(clearedFilters);\r\n    updateFilters(clearedFilters);\r\n  };\r\n\r\n  const handleResultClick = (result: SearchResult) => {\r\n    navigate(result.url);\r\n  };\r\n\r\n  const handleLikeResult = (_resultId: string) => {\r\n    // TODO: Implement like functionality\r\n    showSuccess('Liked!', 'Added to your favorites');\r\n  };\r\n\r\n  const formatDate = (date: Date) => {\r\n    return new Intl.DateTimeFormat('en-US', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      year: 'numeric',\r\n    }).format(date);\r\n  };\r\n\r\n  const activeFiltersCount = Object.values(tempFilters).filter(value => {\r\n    if (Array.isArray(value)) return value.length > 0;\r\n    if (typeof value === 'object' && value !== null) return true;\r\n    return value !== undefined && value !== 'relevance' && value !== 'desc';\r\n  }).length;\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"space-y-4\">\r\n        <h1 className=\"text-3xl font-bold\">Search</h1>\r\n        \r\n        {/* Search Bar */}\r\n        <GlobalSearch showFullInterface className=\"max-w-2xl\" />\r\n        \r\n        {/* Results Summary & Controls */}\r\n        {query && (\r\n          <div className=\"flex items-center justify-between flex-wrap gap-4\">\r\n            <div className=\"flex items-center gap-4\">\r\n              <p className=\"text-muted-foreground\">\r\n                {loading ? 'Searching...' : `${totalResults} results for \"${query}\"`}\r\n              </p>\r\n              \r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => setShowFilters(!showFilters)}\r\n                className=\"relative\"\r\n              >\r\n                <SlidersHorizontal className=\"h-4 w-4 mr-2\" />\r\n                Filters\r\n                {activeFiltersCount > 0 && (\r\n                  <Badge variant=\"destructive\" className=\"ml-2 text-xs px-1 min-w-[1.25rem] h-5\">\r\n                    {activeFiltersCount}\r\n                  </Badge>\r\n                )}\r\n              </Button>\r\n            </div>\r\n            \r\n            <div className=\"flex items-center gap-2\">\r\n              <Select \r\n                value={filters.sortBy || 'relevance'} \r\n                onValueChange={(value: string) => updateFilters({ sortBy: value as any })}\r\n              >\r\n                <SelectTrigger className=\"w-40\">\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"relevance\">Relevance</SelectItem>\r\n                  <SelectItem value=\"date\">Date</SelectItem>\r\n                  <SelectItem value=\"rating\">Rating</SelectItem>\r\n                  <SelectItem value=\"downloads\">Downloads</SelectItem>\r\n                  <SelectItem value=\"alphabetical\">Alphabetical</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n              \r\n              <div className=\"flex border rounded-md\">\r\n                <Button\r\n                  variant={viewMode === 'grid' ? 'default' : 'ghost'}\r\n                  size=\"sm\"\r\n                  onClick={() => setViewMode('grid')}\r\n                  className=\"rounded-r-none\"\r\n                >\r\n                  <Grid3X3 className=\"h-4 w-4\" />\r\n                </Button>\r\n                <Button\r\n                  variant={viewMode === 'list' ? 'default' : 'ghost'}\r\n                  size=\"sm\"\r\n                  onClick={() => setViewMode('list')}\r\n                  className=\"rounded-l-none\"\r\n                >\r\n                  <List className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"flex gap-6\">\r\n        {/* Filters Sidebar */}\r\n        {showFilters && (\r\n          <Card className=\"w-80 h-fit\">\r\n            <CardHeader className=\"pb-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <CardTitle className=\"text-lg\">Filters</CardTitle>\r\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowFilters(false)}>\r\n                  <X className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              {/* Content Type */}\r\n              <div className=\"space-y-3\">\r\n                <Label className=\"text-sm font-medium\">Content Type</Label>\r\n                <div className=\"space-y-2\">\r\n                  {['app', 'template', 'user', 'documentation'].map((type) => (\r\n                    <div key={type} className=\"flex items-center space-x-2\">\r\n                      <Checkbox\r\n                        id={type}\r\n                        checked={tempFilters.type?.includes(type) || false}\r\n                        onCheckedChange={(checked: boolean) => {\r\n                          const currentTypes = tempFilters.type || [];\r\n                          const newTypes = checked\r\n                            ? [...currentTypes, type]\r\n                            : currentTypes.filter(t => t !== type);\r\n                          setTempFilters({ ...tempFilters, type: newTypes });\r\n                        }}\r\n                      />\r\n                      <Label htmlFor={type} className=\"text-sm capitalize\">\r\n                        {type}\r\n                      </Label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Category */}\r\n              <div className=\"space-y-3\">\r\n                <Label className=\"text-sm font-medium\">Category</Label>\r\n                <div className=\"space-y-2\">\r\n                  {['Business', 'Marketing', 'Communication', 'Productivity', 'Entertainment'].map((category) => (\r\n                    <div key={category} className=\"flex items-center space-x-2\">\r\n                      <Checkbox\r\n                        id={category}\r\n                        checked={tempFilters.category?.includes(category) || false}\r\n                        onCheckedChange={(checked: boolean) => {\r\n                          const currentCategories = tempFilters.category || [];\r\n                          const newCategories = checked\r\n                            ? [...currentCategories, category]\r\n                            : currentCategories.filter(c => c !== category);\r\n                          setTempFilters({ ...tempFilters, category: newCategories });\r\n                        }}\r\n                      />\r\n                      <Label htmlFor={category} className=\"text-sm\">\r\n                        {category}\r\n                      </Label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Framework */}\r\n              <div className=\"space-y-3\">\r\n                <Label className=\"text-sm font-medium\">Framework</Label>\r\n                <div className=\"space-y-2\">\r\n                  {['React', 'Next.js', 'Vue.js', 'Angular', 'Svelte'].map((framework) => (\r\n                    <div key={framework} className=\"flex items-center space-x-2\">\r\n                      <Checkbox\r\n                        id={framework}\r\n                        checked={tempFilters.framework?.includes(framework) || false}\r\n                        onCheckedChange={(checked: boolean) => {\r\n                          const currentFrameworks = tempFilters.framework || [];\r\n                          const newFrameworks = checked\r\n                            ? [...currentFrameworks, framework]\r\n                            : currentFrameworks.filter(f => f !== framework);\r\n                          setTempFilters({ ...tempFilters, framework: newFrameworks });\r\n                        }}\r\n                      />\r\n                      <Label htmlFor={framework} className=\"text-sm\">\r\n                        {framework}\r\n                      </Label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Language */}\r\n              <div className=\"space-y-3\">\r\n                <Label className=\"text-sm font-medium\">Language</Label>\r\n                <div className=\"space-y-2\">\r\n                  {['TypeScript', 'JavaScript', 'Python', 'Java', 'Go'].map((language) => (\r\n                    <div key={language} className=\"flex items-center space-x-2\">\r\n                      <Checkbox\r\n                        id={language}\r\n                        checked={tempFilters.language?.includes(language) || false}\r\n                        onCheckedChange={(checked: boolean) => {\r\n                          const currentLanguages = tempFilters.language || [];\r\n                          const newLanguages = checked\r\n                            ? [...currentLanguages, language]\r\n                            : currentLanguages.filter(l => l !== language);\r\n                          setTempFilters({ ...tempFilters, language: newLanguages });\r\n                        }}\r\n                      />\r\n                      <Label htmlFor={language} className=\"text-sm\">\r\n                        {language}\r\n                      </Label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Difficulty */}\r\n              <div className=\"space-y-3\">\r\n                <Label className=\"text-sm font-medium\">Difficulty</Label>\r\n                <div className=\"space-y-2\">\r\n                  {['beginner', 'intermediate', 'advanced'].map((difficulty) => (\r\n                    <div key={difficulty} className=\"flex items-center space-x-2\">\r\n                      <Checkbox\r\n                        id={difficulty}\r\n                        checked={tempFilters.difficulty?.includes(difficulty) || false}\r\n                        onCheckedChange={(checked: boolean) => {\r\n                          const currentDifficulty = tempFilters.difficulty || [];\r\n                          const newDifficulty = checked\r\n                            ? [...currentDifficulty, difficulty]\r\n                            : currentDifficulty.filter(d => d !== difficulty);\r\n                          setTempFilters({ ...tempFilters, difficulty: newDifficulty });\r\n                        }}\r\n                      />\r\n                      <Label htmlFor={difficulty} className=\"text-sm capitalize\">\r\n                        {difficulty}\r\n                      </Label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Filter Actions */}\r\n              <div className=\"flex gap-2 pt-4 border-t\">\r\n                <Button onClick={handleApplyFilters} className=\"flex-1\">\r\n                  Apply Filters\r\n                </Button>\r\n                <Button variant=\"outline\" onClick={handleClearFilters}>\r\n                  Clear\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Results */}\r\n        <div className=\"flex-1 space-y-6\">\r\n          {loading && results.length === 0 ? (\r\n            <div className=\"flex items-center justify-center py-12\">\r\n              <Loader size=\"lg\" />\r\n            </div>\r\n          ) : results.length === 0 && query ? (\r\n            <EmptyState\r\n              title=\"No results found\"\r\n              description={`No results found for \"${query}\". Try adjusting your search terms or filters.`}\r\n              action={\r\n                <Button onClick={handleClearFilters}>\r\n                  Clear Filters\r\n                </Button>\r\n              }\r\n            />\r\n          ) : (\r\n            <>\r\n              {/* Results Grid/List */}\r\n              <div className={\r\n                viewMode === 'grid' \r\n                  ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' \r\n                  : 'space-y-4'\r\n              }>\r\n                {results.map((result) => (\r\n                  <ResultCard\r\n                    key={result.id}\r\n                    result={result}\r\n                    viewMode={viewMode}\r\n                    onResultClick={handleResultClick}\r\n                    onLikeResult={handleLikeResult}\r\n                    formatDate={formatDate}\r\n                  />\r\n                ))}\r\n              </div>\r\n\r\n              {/* Load More */}\r\n              {hasMore && (\r\n                <div className=\"flex justify-center pt-6\">\r\n                  <Button onClick={loadMore} disabled={loading}>\r\n                    {loading ? 'Loading...' : 'Load More'}\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface ResultCardProps {\r\n  result: SearchResult;\r\n  viewMode: ViewMode;\r\n  onResultClick: (result: SearchResult) => void;\r\n  onLikeResult: (id: string) => void;\r\n  formatDate: (date: Date) => string;\r\n}\r\n\r\nfunction ResultCard({ result, viewMode, onResultClick, onLikeResult, formatDate }: ResultCardProps) {\r\n  if (viewMode === 'list') {\r\n    return (\r\n      <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"flex gap-4\">\r\n            {result.thumbnail && (\r\n              <img\r\n                src={result.thumbnail}\r\n                alt={result.title}\r\n                className=\"w-20 h-20 rounded-lg object-cover flex-shrink-0\"\r\n              />\r\n            )}\r\n            <div className=\"flex-1 min-w-0\">\r\n              <div className=\"flex items-start justify-between mb-2\">\r\n                <h3 \r\n                  className=\"font-semibold text-lg cursor-pointer hover:text-primary\"\r\n                  onClick={() => onResultClick(result)}\r\n                >\r\n                  {result.title}\r\n                </h3>\r\n                <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n                  {result.metadata?.rating && (\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <Star className=\"h-4 w-4 text-yellow-400 fill-current\" />\r\n                      <span className=\"text-sm\">{result.metadata.rating}</span>\r\n                    </div>\r\n                  )}\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => onLikeResult(result.id)}\r\n                  >\r\n                    <Heart className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              \r\n              <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\">\r\n                {result.description}\r\n              </p>\r\n              \r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\r\n                  {result.author && (\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <User className=\"h-3 w-3\" />\r\n                      {result.author.name}\r\n                    </div>\r\n                  )}\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <Calendar className=\"h-3 w-3\" />\r\n                    {formatDate(result.updatedAt)}\r\n                  </div>\r\n                  {result.metadata?.downloads && (\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <Download className=\"h-3 w-3\" />\r\n                      {result.metadata.downloads}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                \r\n                <div className=\"flex items-center gap-2\">\r\n                  <Badge variant=\"secondary\">{result.type}</Badge>\r\n                  {result.metadata?.framework && (\r\n                    <Badge variant=\"outline\">{result.metadata.framework}</Badge>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  // Grid view\r\n  return (\r\n    <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\r\n      <div className=\"aspect-video relative overflow-hidden rounded-t-lg\">\r\n        {result.thumbnail ? (\r\n          <img\r\n            src={result.thumbnail}\r\n            alt={result.title}\r\n            className=\"w-full h-full object-cover\"\r\n          />\r\n        ) : (\r\n          <div className=\"w-full h-full bg-muted flex items-center justify-center\">\r\n            <Search className=\"h-12 w-12 text-muted-foreground\" />\r\n          </div>\r\n        )}\r\n        <div className=\"absolute top-2 right-2\">\r\n          <Button\r\n            variant=\"secondary\"\r\n            size=\"sm\"\r\n            onClick={(e: React.MouseEvent) => {\r\n              e.stopPropagation();\r\n              onLikeResult(result.id);\r\n            }}\r\n          >\r\n            <Heart className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      \r\n      <CardContent className=\"p-4\">\r\n        <div className=\"space-y-3\">\r\n          <div>\r\n            <h3 \r\n              className=\"font-semibold text-lg mb-1 cursor-pointer hover:text-primary line-clamp-1\"\r\n              onClick={() => onResultClick(result)}\r\n            >\r\n              {result.title}\r\n            </h3>\r\n            <p className=\"text-muted-foreground text-sm line-clamp-2\">\r\n              {result.description}\r\n            </p>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              {result.metadata?.rating && (\r\n                <div className=\"flex items-center gap-1\">\r\n                  <Star className=\"h-4 w-4 text-yellow-400 fill-current\" />\r\n                  <span className=\"text-sm\">{result.metadata.rating}</span>\r\n                </div>\r\n              )}\r\n              {result.metadata?.downloads && (\r\n                <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\r\n                  <Download className=\"h-3 w-3\" />\r\n                  {result.metadata.downloads}\r\n                </div>\r\n              )}\r\n            </div>\r\n            \r\n            <Badge variant=\"secondary\">{result.type}</Badge>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\r\n            {result.author && (\r\n              <div className=\"flex items-center gap-1\">\r\n                <User className=\"h-3 w-3\" />\r\n                {result.author.name}\r\n              </div>\r\n            )}\r\n            <div className=\"flex items-center gap-1\">\r\n              <Calendar className=\"h-3 w-3\" />\r\n              {formatDate(result.updatedAt)}\r\n            </div>\r\n          </div>\r\n          \r\n          {result.tags.length > 0 && (\r\n            <div className=\"flex flex-wrap gap-1\">\r\n              {result.tags.slice(0, 3).map((tag) => (\r\n                <Badge key={tag} variant=\"outline\" className=\"text-xs\">\r\n                  {tag}\r\n                </Badge>\r\n              ))}\r\n              {result.tags.length > 3 && (\r\n                <Badge variant=\"outline\" className=\"text-xs\">\r\n                  +{result.tags.length - 3}\r\n                </Badge>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}"],"names":["Checkbox","id","checked","onCheckedChange","disabled","className","ariaLabel","jsx","type","role","cn","onClick","children","Check","GlobalSearch","placeholder","showFullInterface","navigate","useNavigate","query","search","clearSearch","getSuggestions","quickSearch","recentSearches","popularSearches","loading","useSearch","localQuery","setLocalQuery","useState","suggestions","setSuggestions","quickResults","setQuickResults","isOpen","setIsOpen","activeIndex","setActiveIndex","searchRef","useRef","inputRef","debounceRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","clearTimeout","trim","length","setTimeout","async","suggestionsData","quickData","Promise","all","error","handleSearch","searchQuery","encodeURIComponent","handleSuggestionClick","suggestion","handleQuickResultClick","result","url","showDropdown","jsxs","ref","onSubmit","e","preventDefault","Search","Input","value","onChange","onFocus","onKeyDown","allItems","map","r","title","key","prev","selectedItem","resultIndex","blur","Button","variant","size","focus","X","Card","CardContent","index","itemIndex","thumbnail","src","alt","description","Badge","ArrowRight","slice","recent","Clock","popular","TrendingUp","BaseFeedback","icon","Icon","actions","default","success","warning","info","EmptyState","action","Inbox","Loader","text","Loader2","sm","md","lg","xl","SearchPage","searchParams","setSearchParams","useSearchParams","showSuccess","useNotifications","results","filters","hasMore","totalResults","updateFilters","loadMore","viewMode","setViewMode","showFilters","setShowFilters","tempFilters","setTempFilters","queryParam","get","q","handleClearFilters","clearedFilters","sortBy","sortOrder","handleResultClick","handleLikeResult","_resultId","formatDate","date","Intl","DateTimeFormat","month","day","year","format","activeFiltersCount","Object","values","filter","Array","isArray","SlidersHorizontal","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","Grid3X3","List","CardHeader","CardTitle","Label","includes","currentTypes","newTypes","t","htmlFor","category","currentCategories","newCategories","c","framework","currentFrameworks","newFrameworks","f","language","currentLanguages","newLanguages","l","difficulty","currentDifficulty","newDifficulty","d","Fragment","ResultCard","onResultClick","onLikeResult","metadata","rating","Star","Heart","author","User","name","Calendar","updatedAt","downloads","Download","stopPropagation","tags","tag"],"mappings":"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"}
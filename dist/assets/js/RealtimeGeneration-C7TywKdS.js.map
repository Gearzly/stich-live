{"version":3,"file":"RealtimeGeneration-C7TywKdS.js","sources":["../../../src/services/RealtimeService.ts","../../../src/components/RealtimeGeneration.tsx","../../../src/hooks/useRealtimeGeneration.ts"],"sourcesContent":["/**\r\n * Real-time Updates Service\r\n * Handles real-time communication for AI generation progress using Firebase Realtime Database\r\n */\r\n\r\nimport { getDatabase, ref, set, onValue, off, serverTimestamp } from 'firebase/database';\r\nimport app from '@/lib/firebase';\r\n\r\nexport interface GenerationProgress {\r\n  sessionId: string;\r\n  userId: string;\r\n  status: 'initializing' | 'analyzing' | 'generating' | 'reviewing' | 'completed' | 'error';\r\n  progress: number; // 0-100\r\n  currentStep: string;\r\n  files?: Array<{\r\n    name: string;\r\n    path: string;\r\n    content: string;\r\n    language: string;\r\n  }>;\r\n  error?: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport interface StreamMessage {\r\n  type: 'progress' | 'file' | 'error' | 'complete';\r\n  data: any;\r\n  timestamp: number;\r\n}\r\n\r\nexport class RealtimeService {\r\n  private static instance: RealtimeService;\r\n  private database = getDatabase(app);\r\n  private listeners = new Map<string, () => void>();\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): RealtimeService {\r\n    if (!RealtimeService.instance) {\r\n      RealtimeService.instance = new RealtimeService();\r\n    }\r\n    return RealtimeService.instance;\r\n  }\r\n\r\n  /**\r\n   * Start a generation session with real-time updates\r\n   */\r\n  async startGenerationSession(sessionId: string, userId: string): Promise<void> {\r\n    const sessionRef = ref(this.database, `generations/${sessionId}`);\r\n    \r\n    const initialProgress: GenerationProgress = {\r\n      sessionId,\r\n      userId,\r\n      status: 'initializing',\r\n      progress: 0,\r\n      currentStep: 'Starting AI generation...',\r\n      timestamp: Date.now(),\r\n    };\r\n\r\n    await set(sessionRef, {\r\n      ...initialProgress,\r\n      createdAt: serverTimestamp(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update generation progress\r\n   */\r\n  async updateProgress(\r\n    sessionId: string, \r\n    status: GenerationProgress['status'],\r\n    progress: number,\r\n    currentStep: string,\r\n    files?: GenerationProgress['files']\r\n  ): Promise<void> {\r\n    const sessionRef = ref(this.database, `generations/${sessionId}`);\r\n    \r\n    const update: Partial<GenerationProgress> = {\r\n      status,\r\n      progress,\r\n      currentStep,\r\n      timestamp: Date.now(),\r\n    };\r\n\r\n    if (files) {\r\n      update.files = files;\r\n    }\r\n\r\n    await set(sessionRef, {\r\n      ...update,\r\n      updatedAt: serverTimestamp(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mark generation as completed\r\n   */\r\n  async completeGeneration(sessionId: string, files: GenerationProgress['files']): Promise<void> {\r\n    await this.updateProgress(sessionId, 'completed', 100, 'Generation completed successfully', files);\r\n  }\r\n\r\n  /**\r\n   * Mark generation as error\r\n   */\r\n  async errorGeneration(sessionId: string, error: string): Promise<void> {\r\n    const sessionRef = ref(this.database, `generations/${sessionId}`);\r\n    \r\n    await set(sessionRef, {\r\n      status: 'error',\r\n      progress: 0,\r\n      currentStep: 'Generation failed',\r\n      error,\r\n      timestamp: Date.now(),\r\n      updatedAt: serverTimestamp(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Listen to generation progress updates\r\n   */\r\n  subscribeToGeneration(\r\n    sessionId: string, \r\n    callback: (progress: GenerationProgress) => void\r\n  ): () => void {\r\n    const sessionRef = ref(this.database, `generations/${sessionId}`);\r\n    \r\n    const unsubscribe = onValue(sessionRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        callback(data as GenerationProgress);\r\n      }\r\n    });\r\n\r\n    // Store the unsubscribe function\r\n    this.listeners.set(sessionId, unsubscribe);\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      off(sessionRef, 'value', unsubscribe);\r\n      this.listeners.delete(sessionId);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Send real-time message to a session\r\n   */\r\n  async sendMessage(sessionId: string, message: StreamMessage): Promise<void> {\r\n    const messageRef = ref(this.database, `messages/${sessionId}/${Date.now()}`);\r\n    \r\n    await set(messageRef, {\r\n      ...message,\r\n      createdAt: serverTimestamp(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Listen to real-time messages for a session\r\n   */\r\n  subscribeToMessages(\r\n    sessionId: string,\r\n    callback: (message: StreamMessage) => void\r\n  ): () => void {\r\n    const messagesRef = ref(this.database, `messages/${sessionId}`);\r\n    \r\n    const unsubscribe = onValue(messagesRef, (snapshot) => {\r\n      const messages = snapshot.val();\r\n      if (messages) {\r\n        // Get the latest message\r\n        const messageKeys = Object.keys(messages).sort();\r\n        const latestKey = messageKeys[messageKeys.length - 1];\r\n        const latestMessage = messages[latestKey];\r\n        \r\n        if (latestMessage) {\r\n          callback(latestMessage as StreamMessage);\r\n        }\r\n      }\r\n    });\r\n\r\n    const listenerId = `messages_${sessionId}`;\r\n    this.listeners.set(listenerId, unsubscribe);\r\n\r\n    return () => {\r\n      off(messagesRef, 'value', unsubscribe);\r\n      this.listeners.delete(listenerId);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get generation status\r\n   */\r\n  async getGenerationStatus(sessionId: string): Promise<GenerationProgress | null> {\r\n    return new Promise((resolve) => {\r\n      const sessionRef = ref(this.database, `generations/${sessionId}`);\r\n      \r\n      onValue(sessionRef, (snapshot) => {\r\n        const data = snapshot.val();\r\n        resolve(data as GenerationProgress | null);\r\n      }, { onlyOnce: true });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clean up old generation sessions\r\n   */\r\n  async cleanupOldSessions(maxAgeHours: number = 24): Promise<void> {\r\n    const cutoffTime = Date.now() - (maxAgeHours * 60 * 60 * 1000);\r\n    \r\n    // This would typically be done via Firebase Functions\r\n    // For now, we'll just note that cleanup should be implemented server-side\r\n    console.log(`Cleanup sessions older than ${cutoffTime}`);\r\n  }\r\n\r\n  /**\r\n   * Disconnect all listeners\r\n   */\r\n  disconnectAll(): void {\r\n    this.listeners.forEach((unsubscribe) => {\r\n      unsubscribe();\r\n    });\r\n    this.listeners.clear();\r\n  }\r\n\r\n  /**\r\n   * Stream AI generation with live file updates\r\n   */\r\n  async streamGeneration(\r\n    sessionId: string,\r\n    userId: string,\r\n    onProgress: (progress: GenerationProgress) => void,\r\n    onMessage: (message: StreamMessage) => void\r\n  ): Promise<void> {\r\n    // Start the session\r\n    await this.startGenerationSession(sessionId, userId);\r\n\r\n    // Subscribe to progress updates\r\n    const unsubscribeProgress = this.subscribeToGeneration(sessionId, onProgress);\r\n    \r\n    // Subscribe to messages\r\n    const unsubscribeMessages = this.subscribeToMessages(sessionId, onMessage);\r\n\r\n    // Simulate AI generation process with real-time updates\r\n    try {\r\n      // Step 1: Analyzing\r\n      await this.updateProgress(sessionId, 'analyzing', 10, 'Analyzing requirements...');\r\n      await this.sendMessage(sessionId, {\r\n        type: 'progress',\r\n        data: { step: 'analyzing', message: 'Breaking down your requirements...' },\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      // Simulate delay\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n      // Step 2: Generating\r\n      await this.updateProgress(sessionId, 'generating', 30, 'Generating code structure...');\r\n      await this.sendMessage(sessionId, {\r\n        type: 'progress',\r\n        data: { step: 'generating', message: 'Creating project structure...' },\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      // Simulate file generation\r\n      const files = [\r\n        {\r\n          name: 'package.json',\r\n          path: '/package.json',\r\n          content: JSON.stringify({ name: 'generated-app', version: '1.0.0' }, null, 2),\r\n          language: 'json',\r\n        },\r\n        {\r\n          name: 'index.html',\r\n          path: '/index.html',\r\n          content: '<!DOCTYPE html><html><head><title>Generated App</title></head><body><h1>Hello World</h1></body></html>',\r\n          language: 'html',\r\n        },\r\n      ];\r\n\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file = files[i];\r\n        const progress = 30 + (i + 1) * 20;\r\n        \r\n        await this.updateProgress(\r\n          sessionId, \r\n          'generating', \r\n          progress, \r\n          `Generating ${file.name}...`,\r\n          files.slice(0, i + 1)\r\n        );\r\n        \r\n        await this.sendMessage(sessionId, {\r\n          type: 'file',\r\n          data: file,\r\n          timestamp: Date.now(),\r\n        });\r\n\r\n        // Simulate generation time\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n      }\r\n\r\n      // Step 3: Reviewing\r\n      await this.updateProgress(sessionId, 'reviewing', 80, 'Reviewing generated code...');\r\n      await this.sendMessage(sessionId, {\r\n        type: 'progress',\r\n        data: { step: 'reviewing', message: 'Optimizing and reviewing code quality...' },\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n      // Step 4: Complete\r\n      await this.completeGeneration(sessionId, files);\r\n      await this.sendMessage(sessionId, {\r\n        type: 'complete',\r\n        data: { files, message: 'Generation completed successfully!' },\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n    } catch (error) {\r\n      await this.errorGeneration(sessionId, error instanceof Error ? error.message : 'Unknown error');\r\n      await this.sendMessage(sessionId, {\r\n        type: 'error',\r\n        data: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        timestamp: Date.now(),\r\n      });\r\n    } finally {\r\n      // Cleanup listeners after completion\r\n      setTimeout(() => {\r\n        unsubscribeProgress();\r\n        unsubscribeMessages();\r\n      }, 10000); // Keep alive for 10 seconds after completion\r\n    }\r\n  }\r\n}","/**\r\n * Real-time Generation Component\r\n * Demonstrates live AI generation with real-time progress updates\r\n */\r\n\r\nimport { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { useRealtimeGeneration } from '@/hooks/useRealtimeGeneration';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { \r\n  Play, \r\n  Square, \r\n  Trash2, \r\n  Clock, \r\n  CheckCircle, \r\n  XCircle, \r\n  Code, \r\n  FileText,\r\n  Loader2 \r\n} from 'lucide-react';\r\n\r\nexport function RealtimeGeneration() {\r\n  const { user } = useAuth();\r\n  const {\r\n    isGenerating,\r\n    progress,\r\n    messages,\r\n    error,\r\n    startGeneration,\r\n    stopGeneration,\r\n    clearGeneration,\r\n  } = useRealtimeGeneration();\r\n\r\n  const [sessionId, setSessionId] = useState<string | null>(null);\r\n\r\n  /**\r\n   * Start a new generation\r\n   */\r\n  const handleStartGeneration = async () => {\r\n    if (!user) {\r\n      alert('Please login to start generation');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const newSessionId = await startGeneration(user.uid);\r\n      setSessionId(newSessionId);\r\n    } catch (error) {\r\n      console.error('Failed to start generation:', error);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Stop current generation\r\n   */\r\n  const handleStopGeneration = () => {\r\n    stopGeneration();\r\n  };\r\n\r\n  /**\r\n   * Clear generation results\r\n   */\r\n  const handleClearGeneration = () => {\r\n    clearGeneration();\r\n    setSessionId(null);\r\n  };\r\n\r\n  /**\r\n   * Get status badge\r\n   */\r\n  const getStatusBadge = () => {\r\n    if (!progress) return null;\r\n\r\n    const statusConfig = {\r\n      initializing: { variant: 'secondary' as const, icon: Clock, text: 'Initializing' },\r\n      analyzing: { variant: 'default' as const, icon: Loader2, text: 'Analyzing' },\r\n      generating: { variant: 'default' as const, icon: Code, text: 'Generating' },\r\n      reviewing: { variant: 'default' as const, icon: FileText, text: 'Reviewing' },\r\n      completed: { variant: 'default' as const, icon: CheckCircle, text: 'Completed' },\r\n      error: { variant: 'destructive' as const, icon: XCircle, text: 'Error' },\r\n    };\r\n\r\n    const config = statusConfig[progress.status];\r\n    const Icon = config.icon;\r\n\r\n    return (\r\n      <Badge variant={config.variant} className=\"flex items-center space-x-1\">\r\n        <Icon className={`h-3 w-3 ${progress.status === 'analyzing' || progress.status === 'generating' ? 'animate-spin' : ''}`} />\r\n        <span>{config.text}</span>\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-6 space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center justify-between\">\r\n            <span>Real-time AI Generation</span>\r\n            <div className=\"flex items-center space-x-2\">\r\n              {getStatusBadge()}\r\n              {sessionId && (\r\n                <Badge variant=\"outline\" className=\"font-mono text-xs\">\r\n                  {sessionId}\r\n                </Badge>\r\n              )}\r\n            </div>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <p className=\"text-muted-foreground\">\r\n            This demonstrates real-time AI generation with live progress updates using Firebase Realtime Database.\r\n          </p>\r\n\r\n          {/* Control Buttons */}\r\n          <div className=\"flex space-x-2\">\r\n            <Button\r\n              onClick={handleStartGeneration}\r\n              disabled={isGenerating || !user}\r\n              className=\"flex items-center space-x-2\"\r\n            >\r\n              <Play className=\"h-4 w-4\" />\r\n              <span>Start Generation</span>\r\n            </Button>\r\n\r\n            {isGenerating && (\r\n              <Button\r\n                variant=\"destructive\"\r\n                onClick={handleStopGeneration}\r\n                className=\"flex items-center space-x-2\"\r\n              >\r\n                <Square className=\"h-4 w-4\" />\r\n                <span>Stop</span>\r\n              </Button>\r\n            )}\r\n\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={handleClearGeneration}\r\n              className=\"flex items-center space-x-2\"\r\n            >\r\n              <Trash2 className=\"h-4 w-4\" />\r\n              <span>Clear</span>\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Progress Display */}\r\n          {progress && (\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center justify-between text-sm\">\r\n                <span className=\"font-medium\">{progress.currentStep}</span>\r\n                <span className=\"text-muted-foreground\">{progress.progress}%</span>\r\n              </div>\r\n              <Progress value={progress.progress} className=\"w-full\" />\r\n            </div>\r\n          )}\r\n\r\n          {/* Error Display */}\r\n          {error && (\r\n            <Card className=\"border-destructive\">\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-destructive text-sm\">Error</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <pre className=\"text-sm text-destructive whitespace-pre-wrap\">\r\n                  {error}\r\n                </pre>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Generated Files */}\r\n      {progress?.files && progress.files.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Generated Files ({progress.files.length})</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              {progress.files.map((file, index) => (\r\n                <Card key={index} className=\"border\">\r\n                  <CardHeader className=\"pb-2\">\r\n                    <CardTitle className=\"text-sm flex items-center space-x-2\">\r\n                      <Code className=\"h-4 w-4\" />\r\n                      <span className=\"font-mono\">{file.name}</span>\r\n                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {file.language}\r\n                      </Badge>\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <ScrollArea className=\"h-32 w-full\">\r\n                      <pre className=\"text-xs font-mono whitespace-pre-wrap bg-muted p-2 rounded\">\r\n                        {file.content}\r\n                      </pre>\r\n                    </ScrollArea>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Real-time Messages */}\r\n      {messages.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Live Updates ({messages.length})</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <ScrollArea className=\"h-64 w-full\">\r\n              <div className=\"space-y-2\">\r\n                {messages.map((message, index) => (\r\n                  <div key={index} className=\"flex items-start space-x-2 p-2 bg-muted/50 rounded\">\r\n                    <Badge variant=\"outline\" className=\"text-xs\">\r\n                      {message.type}\r\n                    </Badge>\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"text-sm\">\r\n                        {message.type === 'file' ? (\r\n                          <span className=\"font-mono\">{message.data.name}</span>\r\n                        ) : (\r\n                          <span>{message.data.message || JSON.stringify(message.data)}</span>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        {new Date(message.timestamp).toLocaleTimeString()}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </ScrollArea>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Auth Notice */}\r\n      {!user && (\r\n        <Card className=\"border-yellow-200 bg-yellow-50\">\r\n          <CardHeader>\r\n            <CardTitle className=\"text-yellow-800\">Authentication Required</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p className=\"text-yellow-700\">\r\n              Please login to test the real-time generation features.\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}","/**\r\n * Real-time Generation Hook\r\n * React hook for managing real-time AI generation with live updates\r\n */\r\n\r\nimport { useState, useCallback, useRef, useEffect } from 'react';\r\nimport { RealtimeService, GenerationProgress, StreamMessage } from '@/services/RealtimeService';\r\n\r\ninterface GenerationState {\r\n  isGenerating: boolean;\r\n  progress: GenerationProgress | null;\r\n  messages: StreamMessage[];\r\n  error: string | null;\r\n}\r\n\r\nexport const useRealtimeGeneration = () => {\r\n  const [state, setState] = useState<GenerationState>({\r\n    isGenerating: false,\r\n    progress: null,\r\n    messages: [],\r\n    error: null,\r\n  });\r\n\r\n  const realtimeService = RealtimeService.getInstance();\r\n  const unsubscribeRefs = useRef<(() => void)[]>([]);\r\n\r\n  /**\r\n   * Start a new generation session with real-time updates\r\n   */\r\n  const startGeneration = useCallback(async (userId: string): Promise<string> => {\r\n    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n    setState(prev => ({\r\n      ...prev,\r\n      isGenerating: true,\r\n      progress: null,\r\n      messages: [],\r\n      error: null,\r\n    }));\r\n\r\n    try {\r\n      // Set up real-time listeners\r\n      const unsubscribeProgress = realtimeService.subscribeToGeneration(sessionId, (progress) => {\r\n        setState(prev => ({\r\n          ...prev,\r\n          progress,\r\n          error: progress.error || null,\r\n        }));\r\n\r\n        // If generation is complete or has error, stop generating\r\n        if (progress.status === 'completed' || progress.status === 'error') {\r\n          setState(prev => ({\r\n            ...prev,\r\n            isGenerating: false,\r\n          }));\r\n        }\r\n      });\r\n\r\n      const unsubscribeMessages = realtimeService.subscribeToMessages(sessionId, (message) => {\r\n        setState(prev => ({\r\n          ...prev,\r\n          messages: [...prev.messages, message],\r\n        }));\r\n      });\r\n\r\n      // Store unsubscribe functions\r\n      unsubscribeRefs.current = [unsubscribeProgress, unsubscribeMessages];\r\n\r\n      // Start the generation stream\r\n      await realtimeService.streamGeneration(\r\n        sessionId,\r\n        userId,\r\n        (progress) => {\r\n          console.log('Progress update:', progress);\r\n        },\r\n        (message) => {\r\n          console.log('Message received:', message);\r\n        }\r\n      );\r\n\r\n      return sessionId;\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        isGenerating: false,\r\n        error: error instanceof Error ? error.message : 'Generation failed',\r\n      }));\r\n      throw error;\r\n    }\r\n  }, [realtimeService]);\r\n\r\n  /**\r\n   * Stop the current generation\r\n   */\r\n  const stopGeneration = useCallback(() => {\r\n    // Unsubscribe from all listeners\r\n    unsubscribeRefs.current.forEach(unsubscribe => unsubscribe());\r\n    unsubscribeRefs.current = [];\r\n\r\n    setState(prev => ({\r\n      ...prev,\r\n      isGenerating: false,\r\n    }));\r\n  }, []);\r\n\r\n  /**\r\n   * Clear generation state\r\n   */\r\n  const clearGeneration = useCallback(() => {\r\n    setState({\r\n      isGenerating: false,\r\n      progress: null,\r\n      messages: [],\r\n      error: null,\r\n    });\r\n  }, []);\r\n\r\n  /**\r\n   * Get generation status by session ID\r\n   */\r\n  const getGenerationStatus = useCallback(async (sessionId: string): Promise<GenerationProgress | null> => {\r\n    return await realtimeService.getGenerationStatus(sessionId);\r\n  }, [realtimeService]);\r\n\r\n  /**\r\n   * Resume watching an existing generation session\r\n   */\r\n  const resumeGeneration = useCallback((sessionId: string) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      isGenerating: true,\r\n      error: null,\r\n    }));\r\n\r\n    const unsubscribeProgress = realtimeService.subscribeToGeneration(sessionId, (progress) => {\r\n      setState(prev => ({\r\n        ...prev,\r\n        progress,\r\n        error: progress.error || null,\r\n      }));\r\n\r\n      if (progress.status === 'completed' || progress.status === 'error') {\r\n        setState(prev => ({\r\n          ...prev,\r\n          isGenerating: false,\r\n        }));\r\n      }\r\n    });\r\n\r\n    const unsubscribeMessages = realtimeService.subscribeToMessages(sessionId, (message) => {\r\n      setState(prev => ({\r\n        ...prev,\r\n        messages: [...prev.messages, message],\r\n      }));\r\n    });\r\n\r\n    unsubscribeRefs.current = [unsubscribeProgress, unsubscribeMessages];\r\n  }, [realtimeService]);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      unsubscribeRefs.current.forEach(unsubscribe => unsubscribe());\r\n      realtimeService.disconnectAll();\r\n    };\r\n  }, [realtimeService]);\r\n\r\n  return {\r\n    ...state,\r\n    startGeneration,\r\n    stopGeneration,\r\n    clearGeneration,\r\n    getGenerationStatus,\r\n    resumeGeneration,\r\n  };\r\n};"],"names":["_RealtimeService","constructor","__publicField","this","getDatabase","app","Map","getInstance","instance","startGenerationSession","sessionId","userId","sessionRef","ref","database","initialProgress","status","progress","currentStep","timestamp","Date","now","set","createdAt","serverTimestamp","updateProgress","files","update","updatedAt","completeGeneration","errorGeneration","error","subscribeToGeneration","callback","unsubscribe","onValue","snapshot","data","val","listeners","off","delete","sendMessage","message","messageRef","subscribeToMessages","messagesRef","messages","messageKeys","Object","keys","sort","latestMessage","length","listenerId","getGenerationStatus","Promise","resolve","onlyOnce","cleanupOldSessions","maxAgeHours","disconnectAll","forEach","clear","streamGeneration","onProgress","onMessage","unsubscribeProgress","unsubscribeMessages","type","step","setTimeout","name","path","content","JSON","stringify","version","language","i","file","slice","Error","RealtimeService","RealtimeGeneration","user","useAuth","isGenerating","startGeneration","stopGeneration","clearGeneration","state","setState","useState","realtimeService","unsubscribeRefs","useRef","useCallback","async","Math","random","toString","substr","prev","current","resumeGeneration","useEffect","useRealtimeGeneration","setSessionId","jsxs","className","children","Card","jsx","CardHeader","CardTitle","config","initializing","variant","icon","Clock","text","analyzing","Loader2","generating","Code","reviewing","FileText","completed","CheckCircle","XCircle","Icon","Badge","getStatusBadge","CardContent","Button","onClick","newSessionId","uid","alert","disabled","Play","Square","Trash2","Progress","value","map","index","ScrollArea","toLocaleTimeString"],"mappings":"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"}